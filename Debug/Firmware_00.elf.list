
Firmware_00.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016ec  08000188  08000188  00008188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  08001874  08001874  00009874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  08001878  08001878  00009878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000010  20000000  0800187c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000098  20000010  20000010  00010010  2**2
                  ALLOC
  6 ._user_heap_stack 00000400  200000a8  200000a8  00010010  2**0
                  ALLOC
  7 .ARM.attributes 00000030  00000000  00000000  00010010  2**0
                  CONTENTS, READONLY
  8 .debug_info   0000807f  00000000  00000000  00010040  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000017a7  00000000  00000000  000180bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000a20  00000000  00000000  00019868  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000938  00000000  00000000  0001a288  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000034c3  00000000  00000000  0001abc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000031a6  00000000  00000000  0001e083  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      00000082  00000000  00000000  00021229  2**0
                  CONTENTS, READONLY
 15 .debug_frame  00001fd0  00000000  00000000  000212ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800185c 	.word	0x0800185c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800185c 	.word	0x0800185c
 80001c4:	20000014 	.word	0x20000014

080001c8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80001cc:	4b15      	ldr	r3, [pc, #84]	; (8000224 <SystemInit+0x5c>)
 80001ce:	4a15      	ldr	r2, [pc, #84]	; (8000224 <SystemInit+0x5c>)
 80001d0:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80001d4:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80001d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80001dc:	4b12      	ldr	r3, [pc, #72]	; (8000228 <SystemInit+0x60>)
 80001de:	4a12      	ldr	r2, [pc, #72]	; (8000228 <SystemInit+0x60>)
 80001e0:	6812      	ldr	r2, [r2, #0]
 80001e2:	f042 0201 	orr.w	r2, r2, #1
 80001e6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80001e8:	4b0f      	ldr	r3, [pc, #60]	; (8000228 <SystemInit+0x60>)
 80001ea:	2200      	movs	r2, #0
 80001ec:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80001ee:	4a0e      	ldr	r2, [pc, #56]	; (8000228 <SystemInit+0x60>)
 80001f0:	4b0d      	ldr	r3, [pc, #52]	; (8000228 <SystemInit+0x60>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80001f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80001fc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80001fe:	4b0a      	ldr	r3, [pc, #40]	; (8000228 <SystemInit+0x60>)
 8000200:	4a0a      	ldr	r2, [pc, #40]	; (800022c <SystemInit+0x64>)
 8000202:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000204:	4b08      	ldr	r3, [pc, #32]	; (8000228 <SystemInit+0x60>)
 8000206:	4a08      	ldr	r2, [pc, #32]	; (8000228 <SystemInit+0x60>)
 8000208:	6812      	ldr	r2, [r2, #0]
 800020a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800020e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000210:	4b05      	ldr	r3, [pc, #20]	; (8000228 <SystemInit+0x60>)
 8000212:	2200      	movs	r2, #0
 8000214:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000216:	f000 f80b 	bl	8000230 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800021a:	4b02      	ldr	r3, [pc, #8]	; (8000224 <SystemInit+0x5c>)
 800021c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000220:	609a      	str	r2, [r3, #8]
#endif
}
 8000222:	bd80      	pop	{r7, pc}
 8000224:	e000ed00 	.word	0xe000ed00
 8000228:	40023800 	.word	0x40023800
 800022c:	24003010 	.word	0x24003010

08000230 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000230:	b480      	push	{r7}
 8000232:	b083      	sub	sp, #12
 8000234:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000236:	2300      	movs	r3, #0
 8000238:	607b      	str	r3, [r7, #4]
 800023a:	2300      	movs	r3, #0
 800023c:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800023e:	4b35      	ldr	r3, [pc, #212]	; (8000314 <SetSysClock+0xe4>)
 8000240:	4a34      	ldr	r2, [pc, #208]	; (8000314 <SetSysClock+0xe4>)
 8000242:	6812      	ldr	r2, [r2, #0]
 8000244:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000248:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800024a:	4b32      	ldr	r3, [pc, #200]	; (8000314 <SetSysClock+0xe4>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000252:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	3301      	adds	r3, #1
 8000258:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800025a:	683b      	ldr	r3, [r7, #0]
 800025c:	2b00      	cmp	r3, #0
 800025e:	d103      	bne.n	8000268 <SetSysClock+0x38>
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000266:	d1f0      	bne.n	800024a <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000268:	4b2a      	ldr	r3, [pc, #168]	; (8000314 <SetSysClock+0xe4>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000270:	2b00      	cmp	r3, #0
 8000272:	d002      	beq.n	800027a <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000274:	2301      	movs	r3, #1
 8000276:	603b      	str	r3, [r7, #0]
 8000278:	e001      	b.n	800027e <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800027a:	2300      	movs	r3, #0
 800027c:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800027e:	683b      	ldr	r3, [r7, #0]
 8000280:	2b01      	cmp	r3, #1
 8000282:	d142      	bne.n	800030a <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000284:	4b23      	ldr	r3, [pc, #140]	; (8000314 <SetSysClock+0xe4>)
 8000286:	4a23      	ldr	r2, [pc, #140]	; (8000314 <SetSysClock+0xe4>)
 8000288:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800028a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800028e:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8000290:	4b21      	ldr	r3, [pc, #132]	; (8000318 <SetSysClock+0xe8>)
 8000292:	4a21      	ldr	r2, [pc, #132]	; (8000318 <SetSysClock+0xe8>)
 8000294:	6812      	ldr	r2, [r2, #0]
 8000296:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800029a:	601a      	str	r2, [r3, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800029c:	4b1d      	ldr	r3, [pc, #116]	; (8000314 <SetSysClock+0xe4>)
 800029e:	4a1d      	ldr	r2, [pc, #116]	; (8000314 <SetSysClock+0xe4>)
 80002a0:	6892      	ldr	r2, [r2, #8]
 80002a2:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80002a4:	4b1b      	ldr	r3, [pc, #108]	; (8000314 <SetSysClock+0xe4>)
 80002a6:	4a1b      	ldr	r2, [pc, #108]	; (8000314 <SetSysClock+0xe4>)
 80002a8:	6892      	ldr	r2, [r2, #8]
 80002aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80002ae:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80002b0:	4b18      	ldr	r3, [pc, #96]	; (8000314 <SetSysClock+0xe4>)
 80002b2:	4a18      	ldr	r2, [pc, #96]	; (8000314 <SetSysClock+0xe4>)
 80002b4:	6892      	ldr	r2, [r2, #8]
 80002b6:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 80002ba:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80002bc:	4b15      	ldr	r3, [pc, #84]	; (8000314 <SetSysClock+0xe4>)
 80002be:	4a17      	ldr	r2, [pc, #92]	; (800031c <SetSysClock+0xec>)
 80002c0:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80002c2:	4b14      	ldr	r3, [pc, #80]	; (8000314 <SetSysClock+0xe4>)
 80002c4:	4a13      	ldr	r2, [pc, #76]	; (8000314 <SetSysClock+0xe4>)
 80002c6:	6812      	ldr	r2, [r2, #0]
 80002c8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80002cc:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80002ce:	bf00      	nop
 80002d0:	4b10      	ldr	r3, [pc, #64]	; (8000314 <SetSysClock+0xe4>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d0f9      	beq.n	80002d0 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80002dc:	4b10      	ldr	r3, [pc, #64]	; (8000320 <SetSysClock+0xf0>)
 80002de:	f240 6205 	movw	r2, #1541	; 0x605
 80002e2:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80002e4:	4b0b      	ldr	r3, [pc, #44]	; (8000314 <SetSysClock+0xe4>)
 80002e6:	4a0b      	ldr	r2, [pc, #44]	; (8000314 <SetSysClock+0xe4>)
 80002e8:	6892      	ldr	r2, [r2, #8]
 80002ea:	f022 0203 	bic.w	r2, r2, #3
 80002ee:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80002f0:	4b08      	ldr	r3, [pc, #32]	; (8000314 <SetSysClock+0xe4>)
 80002f2:	4a08      	ldr	r2, [pc, #32]	; (8000314 <SetSysClock+0xe4>)
 80002f4:	6892      	ldr	r2, [r2, #8]
 80002f6:	f042 0202 	orr.w	r2, r2, #2
 80002fa:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80002fc:	bf00      	nop
 80002fe:	4b05      	ldr	r3, [pc, #20]	; (8000314 <SetSysClock+0xe4>)
 8000300:	689b      	ldr	r3, [r3, #8]
 8000302:	f003 030c 	and.w	r3, r3, #12
 8000306:	2b08      	cmp	r3, #8
 8000308:	d1f9      	bne.n	80002fe <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800030a:	370c      	adds	r7, #12
 800030c:	46bd      	mov	sp, r7
 800030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000312:	4770      	bx	lr
 8000314:	40023800 	.word	0x40023800
 8000318:	40007000 	.word	0x40007000
 800031c:	07405408 	.word	0x07405408
 8000320:	40023c00 	.word	0x40023c00

08000324 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
}
 8000328:	46bd      	mov	sp, r7
 800032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032e:	4770      	bx	lr

08000330 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8000334:	e7fe      	b.n	8000334 <HardFault_Handler+0x4>
 8000336:	bf00      	nop

08000338 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 800033c:	e7fe      	b.n	800033c <MemManage_Handler+0x4>
 800033e:	bf00      	nop

08000340 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8000344:	e7fe      	b.n	8000344 <BusFault_Handler+0x4>
 8000346:	bf00      	nop

08000348 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 800034c:	e7fe      	b.n	800034c <UsageFault_Handler+0x4>
 800034e:	bf00      	nop

08000350 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0
}
 8000354:	46bd      	mov	sp, r7
 8000356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035a:	4770      	bx	lr

0800035c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
}
 8000360:	46bd      	mov	sp, r7
 8000362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000366:	4770      	bx	lr

08000368 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
}
 800036c:	46bd      	mov	sp, r7
 800036e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000372:	4770      	bx	lr

08000374 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8000378:	46bd      	mov	sp, r7
 800037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037e:	4770      	bx	lr

08000380 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000380:	f8df d03c 	ldr.w	sp, [pc, #60]	; 80003c0 <LoopFillZerobss+0x16>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000384:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000386:	f000 b804 	b.w	8000392 <LoopCopyDataInit>

0800038a <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800038a:	4b0e      	ldr	r3, [pc, #56]	; (80003c4 <LoopFillZerobss+0x1a>)
  ldr  r3, [r3, r1]
 800038c:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800038e:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000390:	3104      	adds	r1, #4

08000392 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000392:	480d      	ldr	r0, [pc, #52]	; (80003c8 <LoopFillZerobss+0x1e>)
  ldr  r3, =_edata
 8000394:	4b0d      	ldr	r3, [pc, #52]	; (80003cc <LoopFillZerobss+0x22>)
  adds  r2, r0, r1
 8000396:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000398:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800039a:	f4ff aff6 	bcc.w	800038a <CopyDataInit>
  ldr  r2, =_sbss
 800039e:	4a0c      	ldr	r2, [pc, #48]	; (80003d0 <LoopFillZerobss+0x26>)
  b  LoopFillZerobss
 80003a0:	f000 b803 	b.w	80003aa <LoopFillZerobss>

080003a4 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80003a4:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80003a6:	f842 3b04 	str.w	r3, [r2], #4

080003aa <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80003aa:	4b0a      	ldr	r3, [pc, #40]	; (80003d4 <LoopFillZerobss+0x2a>)
  cmp  r2, r3
 80003ac:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80003ae:	f4ff aff9 	bcc.w	80003a4 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80003b2:	f7ff ff09 	bl	80001c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003b6:	f001 fa2b 	bl	8001810 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003ba:	f000 f80f 	bl	80003dc <main>
  bx  lr    
 80003be:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80003c0:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 80003c4:	0800187c 	.word	0x0800187c
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80003c8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80003cc:	20000010 	.word	0x20000010
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 80003d0:	20000010 	.word	0x20000010
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80003d4:	200000a8 	.word	0x200000a8

080003d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003d8:	f7ff bffe 	b.w	80003d8 <ADC_IRQHandler>

080003dc <main>:
void TimingDelay_Decrement(void);

void SysTick_Handler(void);
uint32_t position;
int main(void)
{
 80003dc:	b590      	push	{r4, r7, lr}
 80003de:	b0a7      	sub	sp, #156	; 0x9c
 80003e0:	af06      	add	r7, sp, #24
  Pwm M0_B_H(GPIOE, GPIO_Pin_14, TIM1, GPIO_PinSource14, GPIO_AF_TIM1, (uint8_t) 4);
 80003e2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80003e6:	220e      	movs	r2, #14
 80003e8:	9200      	str	r2, [sp, #0]
 80003ea:	2201      	movs	r2, #1
 80003ec:	9201      	str	r2, [sp, #4]
 80003ee:	2204      	movs	r2, #4
 80003f0:	9202      	str	r2, [sp, #8]
 80003f2:	4618      	mov	r0, r3
 80003f4:	4925      	ldr	r1, [pc, #148]	; (800048c <main+0xb0>)
 80003f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80003fa:	4b25      	ldr	r3, [pc, #148]	; (8000490 <main+0xb4>)
 80003fc:	f000 ff4e 	bl	800129c <_ZN3PwmC1EP12GPIO_TypeDefmP11TIM_TypeDefhhh>
  Pwm M0_A_H(GPIOA, GPIO_Pin_8, TIM1, GPIO_PinSource8, GPIO_AF_TIM1, 1);
 8000400:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000404:	2208      	movs	r2, #8
 8000406:	9200      	str	r2, [sp, #0]
 8000408:	2201      	movs	r2, #1
 800040a:	9201      	str	r2, [sp, #4]
 800040c:	2201      	movs	r2, #1
 800040e:	9202      	str	r2, [sp, #8]
 8000410:	4618      	mov	r0, r3
 8000412:	4920      	ldr	r1, [pc, #128]	; (8000494 <main+0xb8>)
 8000414:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000418:	4b1d      	ldr	r3, [pc, #116]	; (8000490 <main+0xb4>)
 800041a:	f000 ff3f 	bl	800129c <_ZN3PwmC1EP12GPIO_TypeDefmP11TIM_TypeDefhhh>
  GPIO M0_A_L(GPIOE, GPIO_Pin_0);
 800041e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000422:	4618      	mov	r0, r3
 8000424:	4919      	ldr	r1, [pc, #100]	; (800048c <main+0xb0>)
 8000426:	2201      	movs	r2, #1
 8000428:	f001 f8b8 	bl	800159c <_ZN4GPIOC1EP12GPIO_TypeDeft>
  GPIO M0_B_L(GPIOE, GPIO_Pin_1);
 800042c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000430:	4618      	mov	r0, r3
 8000432:	4916      	ldr	r1, [pc, #88]	; (800048c <main+0xb0>)
 8000434:	2202      	movs	r2, #2
 8000436:	f001 f8b1 	bl	800159c <_ZN4GPIOC1EP12GPIO_TypeDeft>
  //M0_A_L.Set();
  //M0_B_H.set_DutyCycle(300);
  Encoder M0_Enc(GPIOA, GPIOB, GPIO_Pin_15, GPIO_Pin_3, TIM2, GPIO_PinSource15, GPIO_PinSource3, GPIO_AF_TIM2);
 800043a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800043e:	2208      	movs	r2, #8
 8000440:	9200      	str	r2, [sp, #0]
 8000442:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000446:	9201      	str	r2, [sp, #4]
 8000448:	220f      	movs	r2, #15
 800044a:	9202      	str	r2, [sp, #8]
 800044c:	2203      	movs	r2, #3
 800044e:	9203      	str	r2, [sp, #12]
 8000450:	2201      	movs	r2, #1
 8000452:	9204      	str	r2, [sp, #16]
 8000454:	4618      	mov	r0, r3
 8000456:	490f      	ldr	r1, [pc, #60]	; (8000494 <main+0xb8>)
 8000458:	4a0f      	ldr	r2, [pc, #60]	; (8000498 <main+0xbc>)
 800045a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800045e:	f001 f917 	bl	8001690 <_ZN7EncoderC1EP12GPIO_TypeDefS1_mmP11TIM_TypeDefhhh>
  Motor M0(&M0_A_H, &M0_A_L, &M0_B_H, &M0_B_L, &M0_Enc);
 8000462:	4638      	mov	r0, r7
 8000464:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8000468:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800046c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000470:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8000474:	9400      	str	r4, [sp, #0]
 8000476:	f107 0464 	add.w	r4, r7, #100	; 0x64
 800047a:	9401      	str	r4, [sp, #4]
 800047c:	f001 f818 	bl	80014b0 <_ZN5MotorC1EP3PwmP4GPIOS1_S3_P7Encoder>
  M0.Answer(-600);
 8000480:	463b      	mov	r3, r7
 8000482:	4618      	mov	r0, r3
 8000484:	4905      	ldr	r1, [pc, #20]	; (800049c <main+0xc0>)
 8000486:	f001 f831 	bl	80014ec <_ZN5Motor6AnswerEs>
  while (1)
  {
	//  M0.Control_Pos(300);
  }
 800048a:	e7fe      	b.n	800048a <main+0xae>
 800048c:	40021000 	.word	0x40021000
 8000490:	40010000 	.word	0x40010000
 8000494:	40020000 	.word	0x40020000
 8000498:	40020400 	.word	0x40020400
 800049c:	fffffda8 	.word	0xfffffda8

080004a0 <EVAL_AUDIO_TransferComplete_CallBack>:

/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
extern "C" void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
 80004a0:	b480      	push	{r7}
 80004a2:	b083      	sub	sp, #12
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
 80004a8:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 80004aa:	bf00      	nop
}
 80004ac:	370c      	adds	r7, #12
 80004ae:	46bd      	mov	sp, r7
 80004b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <EVAL_AUDIO_GetSampleCallBack>:

/*
 * Callback used by stm324xg_eval_audio_codec.c.
 * Refer to stm324xg_eval_audio_codec.h for more info.
 */
extern "C" uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return -1;
 80004bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80004c0:	4618      	mov	r0, r3
 80004c2:	46bd      	mov	sp, r7
 80004c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 80004d0:	4b37      	ldr	r3, [pc, #220]	; (80005b0 <Audio_MAL_IRQHandler+0xe4>)
 80004d2:	681a      	ldr	r2, [r3, #0]
 80004d4:	4b37      	ldr	r3, [pc, #220]	; (80005b4 <Audio_MAL_IRQHandler+0xe8>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4610      	mov	r0, r2
 80004da:	4619      	mov	r1, r3
 80004dc:	f000 fe5a 	bl	8001194 <DMA_GetFlagStatus>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d062      	beq.n	80005ac <Audio_MAL_IRQHandler+0xe0>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 80004e6:	4b34      	ldr	r3, [pc, #208]	; (80005b8 <Audio_MAL_IRQHandler+0xec>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d04a      	beq.n	8000584 <Audio_MAL_IRQHandler+0xb8>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 80004ee:	bf00      	nop
 80004f0:	4b2f      	ldr	r3, [pc, #188]	; (80005b0 <Audio_MAL_IRQHandler+0xe4>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4618      	mov	r0, r3
 80004f6:	f000 fe35 	bl	8001164 <DMA_GetCmdStatus>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d1f7      	bne.n	80004f0 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 8000500:	4b2b      	ldr	r3, [pc, #172]	; (80005b0 <Audio_MAL_IRQHandler+0xe4>)
 8000502:	681a      	ldr	r2, [r3, #0]
 8000504:	4b2b      	ldr	r3, [pc, #172]	; (80005b4 <Audio_MAL_IRQHandler+0xe8>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4610      	mov	r0, r2
 800050a:	4619      	mov	r1, r3
 800050c:	f000 fe7e 	bl	800120c <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 8000510:	4b2a      	ldr	r3, [pc, #168]	; (80005bc <Audio_MAL_IRQHandler+0xf0>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	461a      	mov	r2, r3
 8000516:	4b2a      	ldr	r3, [pc, #168]	; (80005c0 <Audio_MAL_IRQHandler+0xf4>)
 8000518:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 800051a:	4b27      	ldr	r3, [pc, #156]	; (80005b8 <Audio_MAL_IRQHandler+0xec>)
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000522:	429a      	cmp	r2, r3
 8000524:	bf28      	it	cs
 8000526:	461a      	movcs	r2, r3
 8000528:	4b25      	ldr	r3, [pc, #148]	; (80005c0 <Audio_MAL_IRQHandler+0xf4>)
 800052a:	611a      	str	r2, [r3, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 800052c:	4b20      	ldr	r3, [pc, #128]	; (80005b0 <Audio_MAL_IRQHandler+0xe4>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4618      	mov	r0, r3
 8000532:	4923      	ldr	r1, [pc, #140]	; (80005c0 <Audio_MAL_IRQHandler+0xf4>)
 8000534:	f000 fda4 	bl	8001080 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 8000538:	4b1d      	ldr	r3, [pc, #116]	; (80005b0 <Audio_MAL_IRQHandler+0xe4>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4618      	mov	r0, r3
 800053e:	2101      	movs	r1, #1
 8000540:	f000 fdf4 	bl	800112c <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 8000544:	4b1d      	ldr	r3, [pc, #116]	; (80005bc <Audio_MAL_IRQHandler+0xf0>)
 8000546:	681a      	ldr	r2, [r3, #0]
 8000548:	4b1b      	ldr	r3, [pc, #108]	; (80005b8 <Audio_MAL_IRQHandler+0xec>)
 800054a:	6819      	ldr	r1, [r3, #0]
 800054c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000550:	4299      	cmp	r1, r3
 8000552:	bf38      	it	cc
 8000554:	460b      	movcc	r3, r1
 8000556:	005b      	lsls	r3, r3, #1
 8000558:	441a      	add	r2, r3
 800055a:	4b18      	ldr	r3, [pc, #96]	; (80005bc <Audio_MAL_IRQHandler+0xf0>)
 800055c:	601a      	str	r2, [r3, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 800055e:	4b16      	ldr	r3, [pc, #88]	; (80005b8 <Audio_MAL_IRQHandler+0xec>)
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	4b15      	ldr	r3, [pc, #84]	; (80005b8 <Audio_MAL_IRQHandler+0xec>)
 8000564:	6819      	ldr	r1, [r3, #0]
 8000566:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800056a:	4299      	cmp	r1, r3
 800056c:	bf38      	it	cc
 800056e:	460b      	movcc	r3, r1
 8000570:	1ad2      	subs	r2, r2, r3
 8000572:	4b11      	ldr	r3, [pc, #68]	; (80005b8 <Audio_MAL_IRQHandler+0xec>)
 8000574:	601a      	str	r2, [r3, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 8000576:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <Audio_MAL_IRQHandler+0xe4>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4618      	mov	r0, r3
 800057c:	2101      	movs	r1, #1
 800057e:	f000 fdd5 	bl	800112c <DMA_Cmd>
 8000582:	e013      	b.n	80005ac <Audio_MAL_IRQHandler+0xe0>
    }
    else
    {
      /* Disable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 8000584:	4b0a      	ldr	r3, [pc, #40]	; (80005b0 <Audio_MAL_IRQHandler+0xe4>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4618      	mov	r0, r3
 800058a:	2100      	movs	r1, #0
 800058c:	f000 fdce 	bl	800112c <DMA_Cmd>
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 8000590:	4b07      	ldr	r3, [pc, #28]	; (80005b0 <Audio_MAL_IRQHandler+0xe4>)
 8000592:	681a      	ldr	r2, [r3, #0]
 8000594:	4b07      	ldr	r3, [pc, #28]	; (80005b4 <Audio_MAL_IRQHandler+0xe8>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4610      	mov	r0, r2
 800059a:	4619      	mov	r1, r3
 800059c:	f000 fe36 	bl	800120c <DMA_ClearFlag>
      
      /* Manage the remaining file size and new address offset: This function 
      should be coded by user (its prototype is already declared in stm32f4_discovery_audio_codec.h) */  
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 80005a0:	4b06      	ldr	r3, [pc, #24]	; (80005bc <Audio_MAL_IRQHandler+0xf0>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4618      	mov	r0, r3
 80005a6:	2100      	movs	r1, #0
 80005a8:	f7ff ff7a 	bl	80004a0 <EVAL_AUDIO_TransferComplete_CallBack>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	20000008 	.word	0x20000008
 80005b4:	2000000c 	.word	0x2000000c
 80005b8:	20000000 	.word	0x20000000
 80005bc:	2000002c 	.word	0x2000002c
 80005c0:	2000006c 	.word	0x2000006c

080005c4 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 80005c8:	f7ff ff80 	bl	80004cc <Audio_MAL_IRQHandler>
}
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop

080005d0 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 80005d4:	f7ff ff7a 	bl	80004cc <Audio_MAL_IRQHandler>
}
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop

080005dc <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 80005e0:	480c      	ldr	r0, [pc, #48]	; (8000614 <SPI3_IRQHandler+0x38>)
 80005e2:	2102      	movs	r1, #2
 80005e4:	f000 fbe6 	bl	8000db4 <SPI_I2S_GetFlagStatus>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d011      	beq.n	8000612 <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 80005ee:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <SPI3_IRQHandler+0x3c>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	2b02      	cmp	r3, #2
 80005f4:	d106      	bne.n	8000604 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 80005f6:	f7ff ff5f 	bl	80004b8 <EVAL_AUDIO_GetSampleCallBack>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2004      	movs	r0, #4
 80005fe:	4619      	mov	r1, r3
 8000600:	f000 fe32 	bl	8001268 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 8000604:	f7ff ff58 	bl	80004b8 <EVAL_AUDIO_GetSampleCallBack>
 8000608:	4603      	mov	r3, r0
 800060a:	4802      	ldr	r0, [pc, #8]	; (8000614 <SPI3_IRQHandler+0x38>)
 800060c:	4619      	mov	r1, r3
 800060e:	f000 fbc3 	bl	8000d98 <SPI_I2S_SendData>
  }
}
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40003c00 	.word	0x40003c00
 8000618:	20000004 	.word	0x20000004

0800061c <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800061c:	b480      	push	{r7}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8000626:	2300      	movs	r3, #0
 8000628:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	881b      	ldrh	r3, [r3, #0]
 800062e:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8000630:	687a      	ldr	r2, [r7, #4]
 8000632:	4b28      	ldr	r3, [pc, #160]	; (80006d4 <TIM_TimeBaseInit+0xb8>)
 8000634:	429a      	cmp	r2, r3
 8000636:	d013      	beq.n	8000660 <TIM_TimeBaseInit+0x44>
 8000638:	687a      	ldr	r2, [r7, #4]
 800063a:	4b27      	ldr	r3, [pc, #156]	; (80006d8 <TIM_TimeBaseInit+0xbc>)
 800063c:	429a      	cmp	r2, r3
 800063e:	d00f      	beq.n	8000660 <TIM_TimeBaseInit+0x44>
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000646:	d00b      	beq.n	8000660 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8000648:	687a      	ldr	r2, [r7, #4]
 800064a:	4b24      	ldr	r3, [pc, #144]	; (80006dc <TIM_TimeBaseInit+0xc0>)
 800064c:	429a      	cmp	r2, r3
 800064e:	d007      	beq.n	8000660 <TIM_TimeBaseInit+0x44>
 8000650:	687a      	ldr	r2, [r7, #4]
 8000652:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <TIM_TimeBaseInit+0xc4>)
 8000654:	429a      	cmp	r2, r3
 8000656:	d003      	beq.n	8000660 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8000658:	687a      	ldr	r2, [r7, #4]
 800065a:	4b22      	ldr	r3, [pc, #136]	; (80006e4 <TIM_TimeBaseInit+0xc8>)
 800065c:	429a      	cmp	r2, r3
 800065e:	d108      	bne.n	8000672 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8000660:	89fb      	ldrh	r3, [r7, #14]
 8000662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000666:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	885a      	ldrh	r2, [r3, #2]
 800066c:	89fb      	ldrh	r3, [r7, #14]
 800066e:	4313      	orrs	r3, r2
 8000670:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8000672:	687a      	ldr	r2, [r7, #4]
 8000674:	4b1c      	ldr	r3, [pc, #112]	; (80006e8 <TIM_TimeBaseInit+0xcc>)
 8000676:	429a      	cmp	r2, r3
 8000678:	d00c      	beq.n	8000694 <TIM_TimeBaseInit+0x78>
 800067a:	687a      	ldr	r2, [r7, #4]
 800067c:	4b1b      	ldr	r3, [pc, #108]	; (80006ec <TIM_TimeBaseInit+0xd0>)
 800067e:	429a      	cmp	r2, r3
 8000680:	d008      	beq.n	8000694 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8000682:	89fb      	ldrh	r3, [r7, #14]
 8000684:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000688:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	891a      	ldrh	r2, [r3, #8]
 800068e:	89fb      	ldrh	r3, [r7, #14]
 8000690:	4313      	orrs	r3, r2
 8000692:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	89fa      	ldrh	r2, [r7, #14]
 8000698:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	685a      	ldr	r2, [r3, #4]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	881a      	ldrh	r2, [r3, #0]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 80006aa:	687a      	ldr	r2, [r7, #4]
 80006ac:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <TIM_TimeBaseInit+0xb8>)
 80006ae:	429a      	cmp	r2, r3
 80006b0:	d003      	beq.n	80006ba <TIM_TimeBaseInit+0x9e>
 80006b2:	687a      	ldr	r2, [r7, #4]
 80006b4:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <TIM_TimeBaseInit+0xbc>)
 80006b6:	429a      	cmp	r2, r3
 80006b8:	d104      	bne.n	80006c4 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	7a9b      	ldrb	r3, [r3, #10]
 80006be:	461a      	mov	r2, r3
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	2201      	movs	r2, #1
 80006c8:	829a      	strh	r2, [r3, #20]
}
 80006ca:	3714      	adds	r7, #20
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	40010000 	.word	0x40010000
 80006d8:	40010400 	.word	0x40010400
 80006dc:	40000400 	.word	0x40000400
 80006e0:	40000800 	.word	0x40000800
 80006e4:	40000c00 	.word	0x40000c00
 80006e8:	40001000 	.word	0x40001000
 80006ec:	40001400 	.word	0x40001400

080006f0 <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	683a      	ldr	r2, [r7, #0]
 80006fe:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000700:	370c      	adds	r7, #12
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop

0800070c <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	460b      	mov	r3, r1
 8000716:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000718:	78fb      	ldrb	r3, [r7, #3]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d008      	beq.n	8000730 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	881b      	ldrh	r3, [r3, #0]
 8000722:	b29b      	uxth	r3, r3
 8000724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000728:	b29a      	uxth	r2, r3
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	801a      	strh	r2, [r3, #0]
 800072e:	e007      	b.n	8000740 <TIM_ARRPreloadConfig+0x34>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	881b      	ldrh	r3, [r3, #0]
 8000734:	b29b      	uxth	r3, r3
 8000736:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800073a:	b29a      	uxth	r2, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	801a      	strh	r2, [r3, #0]
  }
}
 8000740:	370c      	adds	r7, #12
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop

0800074c <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	460b      	mov	r3, r1
 8000756:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000758:	78fb      	ldrb	r3, [r7, #3]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d008      	beq.n	8000770 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	881b      	ldrh	r3, [r3, #0]
 8000762:	b29b      	uxth	r3, r3
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	b29a      	uxth	r2, r3
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	801a      	strh	r2, [r3, #0]
 800076e:	e007      	b.n	8000780 <TIM_Cmd+0x34>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	881b      	ldrh	r3, [r3, #0]
 8000774:	b29b      	uxth	r3, r3
 8000776:	f023 0301 	bic.w	r3, r3, #1
 800077a:	b29a      	uxth	r2, r3
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	801a      	strh	r2, [r3, #0]
  }
}
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop

0800078c <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800078c:	b480      	push	{r7}
 800078e:	b085      	sub	sp, #20
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	817b      	strh	r3, [r7, #10]
 800079a:	2300      	movs	r3, #0
 800079c:	81fb      	strh	r3, [r7, #14]
 800079e:	2300      	movs	r3, #0
 80007a0:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	8c1b      	ldrh	r3, [r3, #32]
 80007a6:	b29b      	uxth	r3, r3
 80007a8:	f023 0301 	bic.w	r3, r3, #1
 80007ac:	b29a      	uxth	r2, r3
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	8c1b      	ldrh	r3, [r3, #32]
 80007b6:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	889b      	ldrh	r3, [r3, #4]
 80007bc:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	8b1b      	ldrh	r3, [r3, #24]
 80007c2:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
 80007c4:	897b      	ldrh	r3, [r7, #10]
 80007c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80007ca:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 80007cc:	897b      	ldrh	r3, [r7, #10]
 80007ce:	f023 0303 	bic.w	r3, r3, #3
 80007d2:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	881a      	ldrh	r2, [r3, #0]
 80007d8:	897b      	ldrh	r3, [r7, #10]
 80007da:	4313      	orrs	r3, r2
 80007dc:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 80007de:	89fb      	ldrh	r3, [r7, #14]
 80007e0:	f023 0302 	bic.w	r3, r3, #2
 80007e4:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	899a      	ldrh	r2, [r3, #12]
 80007ea:	89fb      	ldrh	r3, [r7, #14]
 80007ec:	4313      	orrs	r3, r2
 80007ee:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	885a      	ldrh	r2, [r3, #2]
 80007f4:	89fb      	ldrh	r3, [r7, #14]
 80007f6:	4313      	orrs	r3, r2
 80007f8:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80007fa:	687a      	ldr	r2, [r7, #4]
 80007fc:	4b1e      	ldr	r3, [pc, #120]	; (8000878 <TIM_OC1Init+0xec>)
 80007fe:	429a      	cmp	r2, r3
 8000800:	d003      	beq.n	800080a <TIM_OC1Init+0x7e>
 8000802:	687a      	ldr	r2, [r7, #4]
 8000804:	4b1d      	ldr	r3, [pc, #116]	; (800087c <TIM_OC1Init+0xf0>)
 8000806:	429a      	cmp	r2, r3
 8000808:	d123      	bne.n	8000852 <TIM_OC1Init+0xc6>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 800080a:	89fb      	ldrh	r3, [r7, #14]
 800080c:	f023 0308 	bic.w	r3, r3, #8
 8000810:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	89da      	ldrh	r2, [r3, #14]
 8000816:	89fb      	ldrh	r3, [r7, #14]
 8000818:	4313      	orrs	r3, r2
 800081a:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 800081c:	89fb      	ldrh	r3, [r7, #14]
 800081e:	f023 0304 	bic.w	r3, r3, #4
 8000822:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	889a      	ldrh	r2, [r3, #4]
 8000828:	89fb      	ldrh	r3, [r7, #14]
 800082a:	4313      	orrs	r3, r2
 800082c:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
 800082e:	89bb      	ldrh	r3, [r7, #12]
 8000830:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000834:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 8000836:	89bb      	ldrh	r3, [r7, #12]
 8000838:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800083c:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	8a1a      	ldrh	r2, [r3, #16]
 8000842:	89bb      	ldrh	r3, [r7, #12]
 8000844:	4313      	orrs	r3, r2
 8000846:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	8a5a      	ldrh	r2, [r3, #18]
 800084c:	89bb      	ldrh	r3, [r7, #12]
 800084e:	4313      	orrs	r3, r2
 8000850:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	89ba      	ldrh	r2, [r7, #12]
 8000856:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	897a      	ldrh	r2, [r7, #10]
 800085c:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	689a      	ldr	r2, [r3, #8]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	89fa      	ldrh	r2, [r7, #14]
 800086a:	841a      	strh	r2, [r3, #32]
}
 800086c:	3714      	adds	r7, #20
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	40010000 	.word	0x40010000
 800087c:	40010400 	.word	0x40010400

08000880 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000880:	b480      	push	{r7}
 8000882:	b085      	sub	sp, #20
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800088a:	2300      	movs	r3, #0
 800088c:	817b      	strh	r3, [r7, #10]
 800088e:	2300      	movs	r3, #0
 8000890:	81fb      	strh	r3, [r7, #14]
 8000892:	2300      	movs	r3, #0
 8000894:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	8c1b      	ldrh	r3, [r3, #32]
 800089a:	b29b      	uxth	r3, r3
 800089c:	f023 0310 	bic.w	r3, r3, #16
 80008a0:	b29a      	uxth	r2, r3
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	8c1b      	ldrh	r3, [r3, #32]
 80008aa:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	889b      	ldrh	r3, [r3, #4]
 80008b0:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	8b1b      	ldrh	r3, [r3, #24]
 80008b6:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
 80008b8:	897b      	ldrh	r3, [r7, #10]
 80008ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80008be:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 80008c0:	897b      	ldrh	r3, [r7, #10]
 80008c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80008c6:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	881b      	ldrh	r3, [r3, #0]
 80008cc:	021b      	lsls	r3, r3, #8
 80008ce:	b29a      	uxth	r2, r3
 80008d0:	897b      	ldrh	r3, [r7, #10]
 80008d2:	4313      	orrs	r3, r2
 80008d4:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 80008d6:	89fb      	ldrh	r3, [r7, #14]
 80008d8:	f023 0320 	bic.w	r3, r3, #32
 80008dc:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	899b      	ldrh	r3, [r3, #12]
 80008e2:	011b      	lsls	r3, r3, #4
 80008e4:	b29a      	uxth	r2, r3
 80008e6:	89fb      	ldrh	r3, [r7, #14]
 80008e8:	4313      	orrs	r3, r2
 80008ea:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	885b      	ldrh	r3, [r3, #2]
 80008f0:	011b      	lsls	r3, r3, #4
 80008f2:	b29a      	uxth	r2, r3
 80008f4:	89fb      	ldrh	r3, [r7, #14]
 80008f6:	4313      	orrs	r3, r2
 80008f8:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80008fa:	687a      	ldr	r2, [r7, #4]
 80008fc:	4b22      	ldr	r3, [pc, #136]	; (8000988 <TIM_OC2Init+0x108>)
 80008fe:	429a      	cmp	r2, r3
 8000900:	d003      	beq.n	800090a <TIM_OC2Init+0x8a>
 8000902:	687a      	ldr	r2, [r7, #4]
 8000904:	4b21      	ldr	r3, [pc, #132]	; (800098c <TIM_OC2Init+0x10c>)
 8000906:	429a      	cmp	r2, r3
 8000908:	d12b      	bne.n	8000962 <TIM_OC2Init+0xe2>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 800090a:	89fb      	ldrh	r3, [r7, #14]
 800090c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000910:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	89db      	ldrh	r3, [r3, #14]
 8000916:	011b      	lsls	r3, r3, #4
 8000918:	b29a      	uxth	r2, r3
 800091a:	89fb      	ldrh	r3, [r7, #14]
 800091c:	4313      	orrs	r3, r2
 800091e:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 8000920:	89fb      	ldrh	r3, [r7, #14]
 8000922:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000926:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	889b      	ldrh	r3, [r3, #4]
 800092c:	011b      	lsls	r3, r3, #4
 800092e:	b29a      	uxth	r2, r3
 8000930:	89fb      	ldrh	r3, [r7, #14]
 8000932:	4313      	orrs	r3, r2
 8000934:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
 8000936:	89bb      	ldrh	r3, [r7, #12]
 8000938:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800093c:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 800093e:	89bb      	ldrh	r3, [r7, #12]
 8000940:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000944:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	8a1b      	ldrh	r3, [r3, #16]
 800094a:	009b      	lsls	r3, r3, #2
 800094c:	b29a      	uxth	r2, r3
 800094e:	89bb      	ldrh	r3, [r7, #12]
 8000950:	4313      	orrs	r3, r2
 8000952:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	8a5b      	ldrh	r3, [r3, #18]
 8000958:	009b      	lsls	r3, r3, #2
 800095a:	b29a      	uxth	r2, r3
 800095c:	89bb      	ldrh	r3, [r7, #12]
 800095e:	4313      	orrs	r3, r2
 8000960:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	89ba      	ldrh	r2, [r7, #12]
 8000966:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	897a      	ldrh	r2, [r7, #10]
 800096c:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	689a      	ldr	r2, [r3, #8]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	89fa      	ldrh	r2, [r7, #14]
 800097a:	841a      	strh	r2, [r3, #32]
}
 800097c:	3714      	adds	r7, #20
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	40010000 	.word	0x40010000
 800098c:	40010400 	.word	0x40010400

08000990 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000990:	b480      	push	{r7}
 8000992:	b085      	sub	sp, #20
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800099a:	2300      	movs	r3, #0
 800099c:	817b      	strh	r3, [r7, #10]
 800099e:	2300      	movs	r3, #0
 80009a0:	81fb      	strh	r3, [r7, #14]
 80009a2:	2300      	movs	r3, #0
 80009a4:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	8c1b      	ldrh	r3, [r3, #32]
 80009aa:	b29b      	uxth	r3, r3
 80009ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80009b0:	b29a      	uxth	r2, r3
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	8c1b      	ldrh	r3, [r3, #32]
 80009ba:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	889b      	ldrh	r3, [r3, #4]
 80009c0:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	8b9b      	ldrh	r3, [r3, #28]
 80009c6:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 80009c8:	897b      	ldrh	r3, [r7, #10]
 80009ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80009ce:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 80009d0:	897b      	ldrh	r3, [r7, #10]
 80009d2:	f023 0303 	bic.w	r3, r3, #3
 80009d6:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	881a      	ldrh	r2, [r3, #0]
 80009dc:	897b      	ldrh	r3, [r7, #10]
 80009de:	4313      	orrs	r3, r2
 80009e0:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 80009e2:	89fb      	ldrh	r3, [r7, #14]
 80009e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80009e8:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	899b      	ldrh	r3, [r3, #12]
 80009ee:	021b      	lsls	r3, r3, #8
 80009f0:	b29a      	uxth	r2, r3
 80009f2:	89fb      	ldrh	r3, [r7, #14]
 80009f4:	4313      	orrs	r3, r2
 80009f6:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	885b      	ldrh	r3, [r3, #2]
 80009fc:	021b      	lsls	r3, r3, #8
 80009fe:	b29a      	uxth	r2, r3
 8000a00:	89fb      	ldrh	r3, [r7, #14]
 8000a02:	4313      	orrs	r3, r2
 8000a04:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8000a06:	687a      	ldr	r2, [r7, #4]
 8000a08:	4b22      	ldr	r3, [pc, #136]	; (8000a94 <TIM_OC3Init+0x104>)
 8000a0a:	429a      	cmp	r2, r3
 8000a0c:	d003      	beq.n	8000a16 <TIM_OC3Init+0x86>
 8000a0e:	687a      	ldr	r2, [r7, #4]
 8000a10:	4b21      	ldr	r3, [pc, #132]	; (8000a98 <TIM_OC3Init+0x108>)
 8000a12:	429a      	cmp	r2, r3
 8000a14:	d12b      	bne.n	8000a6e <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8000a16:	89fb      	ldrh	r3, [r7, #14]
 8000a18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000a1c:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	89db      	ldrh	r3, [r3, #14]
 8000a22:	021b      	lsls	r3, r3, #8
 8000a24:	b29a      	uxth	r2, r3
 8000a26:	89fb      	ldrh	r3, [r7, #14]
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 8000a2c:	89fb      	ldrh	r3, [r7, #14]
 8000a2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000a32:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	889b      	ldrh	r3, [r3, #4]
 8000a38:	021b      	lsls	r3, r3, #8
 8000a3a:	b29a      	uxth	r2, r3
 8000a3c:	89fb      	ldrh	r3, [r7, #14]
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
 8000a42:	89bb      	ldrh	r3, [r7, #12]
 8000a44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000a48:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 8000a4a:	89bb      	ldrh	r3, [r7, #12]
 8000a4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000a50:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	8a1b      	ldrh	r3, [r3, #16]
 8000a56:	011b      	lsls	r3, r3, #4
 8000a58:	b29a      	uxth	r2, r3
 8000a5a:	89bb      	ldrh	r3, [r7, #12]
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	8a5b      	ldrh	r3, [r3, #18]
 8000a64:	011b      	lsls	r3, r3, #4
 8000a66:	b29a      	uxth	r2, r3
 8000a68:	89bb      	ldrh	r3, [r7, #12]
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	89ba      	ldrh	r2, [r7, #12]
 8000a72:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	897a      	ldrh	r2, [r7, #10]
 8000a78:	839a      	strh	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	689a      	ldr	r2, [r3, #8]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	89fa      	ldrh	r2, [r7, #14]
 8000a86:	841a      	strh	r2, [r3, #32]
}
 8000a88:	3714      	adds	r7, #20
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	40010000 	.word	0x40010000
 8000a98:	40010400 	.word	0x40010400

08000a9c <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	81bb      	strh	r3, [r7, #12]
 8000aaa:	2300      	movs	r3, #0
 8000aac:	817b      	strh	r3, [r7, #10]
 8000aae:	2300      	movs	r3, #0
 8000ab0:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	8c1b      	ldrh	r3, [r3, #32]
 8000ab6:	b29b      	uxth	r3, r3
 8000ab8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000abc:	b29a      	uxth	r2, r3
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	8c1b      	ldrh	r3, [r3, #32]
 8000ac6:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	889b      	ldrh	r3, [r3, #4]
 8000acc:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	8b9b      	ldrh	r3, [r3, #28]
 8000ad2:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
 8000ad4:	89bb      	ldrh	r3, [r7, #12]
 8000ad6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000ada:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 8000adc:	89bb      	ldrh	r3, [r7, #12]
 8000ade:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000ae2:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	881b      	ldrh	r3, [r3, #0]
 8000ae8:	021b      	lsls	r3, r3, #8
 8000aea:	b29a      	uxth	r2, r3
 8000aec:	89bb      	ldrh	r3, [r7, #12]
 8000aee:	4313      	orrs	r3, r2
 8000af0:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8000af2:	897b      	ldrh	r3, [r7, #10]
 8000af4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000af8:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	899b      	ldrh	r3, [r3, #12]
 8000afe:	031b      	lsls	r3, r3, #12
 8000b00:	b29a      	uxth	r2, r3
 8000b02:	897b      	ldrh	r3, [r7, #10]
 8000b04:	4313      	orrs	r3, r2
 8000b06:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	885b      	ldrh	r3, [r3, #2]
 8000b0c:	031b      	lsls	r3, r3, #12
 8000b0e:	b29a      	uxth	r2, r3
 8000b10:	897b      	ldrh	r3, [r7, #10]
 8000b12:	4313      	orrs	r3, r2
 8000b14:	817b      	strh	r3, [r7, #10]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8000b16:	687a      	ldr	r2, [r7, #4]
 8000b18:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <TIM_OC4Init+0xc4>)
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	d003      	beq.n	8000b26 <TIM_OC4Init+0x8a>
 8000b1e:	687a      	ldr	r2, [r7, #4]
 8000b20:	4b10      	ldr	r3, [pc, #64]	; (8000b64 <TIM_OC4Init+0xc8>)
 8000b22:	429a      	cmp	r2, r3
 8000b24:	d10a      	bne.n	8000b3c <TIM_OC4Init+0xa0>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 8000b26:	89fb      	ldrh	r3, [r7, #14]
 8000b28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000b2c:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	8a1b      	ldrh	r3, [r3, #16]
 8000b32:	019b      	lsls	r3, r3, #6
 8000b34:	b29a      	uxth	r2, r3
 8000b36:	89fb      	ldrh	r3, [r7, #14]
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	89fa      	ldrh	r2, [r7, #14]
 8000b40:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	89ba      	ldrh	r2, [r7, #12]
 8000b46:	839a      	strh	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	689a      	ldr	r2, [r3, #8]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	897a      	ldrh	r2, [r7, #10]
 8000b54:	841a      	strh	r2, [r3, #32]
}
 8000b56:	3714      	adds	r7, #20
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	40010000 	.word	0x40010000
 8000b64:	40010400 	.word	0x40010400

08000b68 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint32_t Compare1)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	683a      	ldr	r2, [r7, #0]
 8000b76:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop

08000b84 <TIM_SetCompare2>:
  *         peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint32_t Compare2)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	683a      	ldr	r2, [r7, #0]
 8000b92:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint32_t Compare3)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	683a      	ldr	r2, [r7, #0]
 8000bae:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint32_t Compare4)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	683a      	ldr	r2, [r7, #0]
 8000bca:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <TIM_OC1PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	460b      	mov	r3, r1
 8000be2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	8b1b      	ldrh	r3, [r3, #24]
 8000bec:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 8000bee:	89fb      	ldrh	r3, [r7, #14]
 8000bf0:	f023 0308 	bic.w	r3, r3, #8
 8000bf4:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8000bf6:	89fa      	ldrh	r2, [r7, #14]
 8000bf8:	887b      	ldrh	r3, [r7, #2]
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	89fa      	ldrh	r2, [r7, #14]
 8000c02:	831a      	strh	r2, [r3, #24]
}
 8000c04:	3714      	adds	r7, #20
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop

08000c10 <TIM_OC2PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	460b      	mov	r3, r1
 8000c1a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	8b1b      	ldrh	r3, [r3, #24]
 8000c24:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 8000c26:	89fb      	ldrh	r3, [r7, #14]
 8000c28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000c2c:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 8000c2e:	887b      	ldrh	r3, [r7, #2]
 8000c30:	021b      	lsls	r3, r3, #8
 8000c32:	b29a      	uxth	r2, r3
 8000c34:	89fb      	ldrh	r3, [r7, #14]
 8000c36:	4313      	orrs	r3, r2
 8000c38:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	89fa      	ldrh	r2, [r7, #14]
 8000c3e:	831a      	strh	r2, [r3, #24]
}
 8000c40:	3714      	adds	r7, #20
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	460b      	mov	r3, r1
 8000c56:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	8b9b      	ldrh	r3, [r3, #28]
 8000c60:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 8000c62:	89fb      	ldrh	r3, [r7, #14]
 8000c64:	f023 0308 	bic.w	r3, r3, #8
 8000c68:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 8000c6a:	89fa      	ldrh	r2, [r7, #14]
 8000c6c:	887b      	ldrh	r3, [r7, #2]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	89fa      	ldrh	r2, [r7, #14]
 8000c76:	839a      	strh	r2, [r3, #28]
}
 8000c78:	3714      	adds	r7, #20
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop

08000c84 <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	460b      	mov	r3, r1
 8000c8e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	8b9b      	ldrh	r3, [r3, #28]
 8000c98:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 8000c9a:	89fb      	ldrh	r3, [r7, #14]
 8000c9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000ca0:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 8000ca2:	887b      	ldrh	r3, [r7, #2]
 8000ca4:	021b      	lsls	r3, r3, #8
 8000ca6:	b29a      	uxth	r2, r3
 8000ca8:	89fb      	ldrh	r3, [r7, #14]
 8000caa:	4313      	orrs	r3, r2
 8000cac:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	89fa      	ldrh	r2, [r7, #14]
 8000cb2:	839a      	strh	r2, [r3, #28]
}
 8000cb4:	3714      	adds	r7, #20
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop

08000cc0 <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	460b      	mov	r3, r1
 8000cca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000ccc:	78fb      	ldrb	r3, [r7, #3]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d00c      	beq.n	8000cec <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000cd8:	b29b      	uxth	r3, r3
 8000cda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000cde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000ce2:	b29a      	uxth	r2, r3
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8000cea:	e009      	b.n	8000d00 <TIM_CtrlPWMOutputs+0x40>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000cf2:	b29b      	uxth	r3, r3
 8000cf4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000cf8:	b29a      	uxth	r2, r3
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }  
}
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop

08000d0c <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b087      	sub	sp, #28
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	8179      	strh	r1, [r7, #10]
 8000d16:	813a      	strh	r2, [r7, #8]
 8000d18:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	82fb      	strh	r3, [r7, #22]
  uint16_t tmpccmr1 = 0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	82bb      	strh	r3, [r7, #20]
  uint16_t tmpccer = 0;
 8000d22:	2300      	movs	r3, #0
 8000d24:	827b      	strh	r3, [r7, #18]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	891b      	ldrh	r3, [r3, #8]
 8000d2a:	82fb      	strh	r3, [r7, #22]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	8b1b      	ldrh	r3, [r3, #24]
 8000d30:	82bb      	strh	r3, [r7, #20]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	8c1b      	ldrh	r3, [r3, #32]
 8000d36:	827b      	strh	r3, [r7, #18]

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8000d38:	8afb      	ldrh	r3, [r7, #22]
 8000d3a:	f023 0307 	bic.w	r3, r3, #7
 8000d3e:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_EncoderMode;
 8000d40:	8afa      	ldrh	r2, [r7, #22]
 8000d42:	897b      	ldrh	r3, [r7, #10]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	82fb      	strh	r3, [r7, #22]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 8000d48:	8abb      	ldrh	r3, [r7, #20]
 8000d4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d4e:	f023 0303 	bic.w	r3, r3, #3
 8000d52:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8000d54:	8abb      	ldrh	r3, [r7, #20]
 8000d56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d5a:	f043 0301 	orr.w	r3, r3, #1
 8000d5e:	82bb      	strh	r3, [r7, #20]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 8000d60:	8a7b      	ldrh	r3, [r7, #18]
 8000d62:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000d66:	827b      	strh	r3, [r7, #18]
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8000d68:	88fb      	ldrh	r3, [r7, #6]
 8000d6a:	011b      	lsls	r3, r3, #4
 8000d6c:	b29a      	uxth	r2, r3
 8000d6e:	893b      	ldrh	r3, [r7, #8]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	b29a      	uxth	r2, r3
 8000d74:	8a7b      	ldrh	r3, [r7, #18]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	827b      	strh	r3, [r7, #18]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	8afa      	ldrh	r2, [r7, #22]
 8000d7e:	811a      	strh	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	8aba      	ldrh	r2, [r7, #20]
 8000d84:	831a      	strh	r2, [r3, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	8a7a      	ldrh	r2, [r7, #18]
 8000d8a:	841a      	strh	r2, [r3, #32]
}
 8000d8c:	371c      	adds	r7, #28
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop

08000d98 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	460b      	mov	r3, r1
 8000da2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	887a      	ldrh	r2, [r7, #2]
 8000da8:	819a      	strh	r2, [r3, #12]
}
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	460b      	mov	r3, r1
 8000dbe:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	891b      	ldrh	r3, [r3, #8]
 8000dc8:	b29a      	uxth	r2, r3
 8000dca:	887b      	ldrh	r3, [r7, #2]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d002      	beq.n	8000dda <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	73fb      	strb	r3, [r7, #15]
 8000dd8:	e001      	b.n	8000dde <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8000dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3714      	adds	r7, #20
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	460b      	mov	r3, r1
 8000df6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000df8:	78fb      	ldrb	r3, [r7, #3]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d006      	beq.n	8000e0c <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000dfe:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <RCC_AHB1PeriphClockCmd+0x38>)
 8000e00:	4a08      	ldr	r2, [pc, #32]	; (8000e24 <RCC_AHB1PeriphClockCmd+0x38>)
 8000e02:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8000e04:	687a      	ldr	r2, [r7, #4]
 8000e06:	430a      	orrs	r2, r1
 8000e08:	631a      	str	r2, [r3, #48]	; 0x30
 8000e0a:	e006      	b.n	8000e1a <RCC_AHB1PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000e0c:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <RCC_AHB1PeriphClockCmd+0x38>)
 8000e0e:	4a05      	ldr	r2, [pc, #20]	; (8000e24 <RCC_AHB1PeriphClockCmd+0x38>)
 8000e10:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8000e12:	687a      	ldr	r2, [r7, #4]
 8000e14:	43d2      	mvns	r2, r2
 8000e16:	400a      	ands	r2, r1
 8000e18:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	40023800 	.word	0x40023800

08000e28 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	460b      	mov	r3, r1
 8000e32:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000e34:	78fb      	ldrb	r3, [r7, #3]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d006      	beq.n	8000e48 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000e3a:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <RCC_APB1PeriphClockCmd+0x38>)
 8000e3c:	4a08      	ldr	r2, [pc, #32]	; (8000e60 <RCC_APB1PeriphClockCmd+0x38>)
 8000e3e:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000e40:	687a      	ldr	r2, [r7, #4]
 8000e42:	430a      	orrs	r2, r1
 8000e44:	641a      	str	r2, [r3, #64]	; 0x40
 8000e46:	e006      	b.n	8000e56 <RCC_APB1PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000e48:	4b05      	ldr	r3, [pc, #20]	; (8000e60 <RCC_APB1PeriphClockCmd+0x38>)
 8000e4a:	4a05      	ldr	r2, [pc, #20]	; (8000e60 <RCC_APB1PeriphClockCmd+0x38>)
 8000e4c:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	43d2      	mvns	r2, r2
 8000e52:	400a      	ands	r2, r1
 8000e54:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	40023800 	.word	0x40023800

08000e64 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000e70:	78fb      	ldrb	r3, [r7, #3]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d006      	beq.n	8000e84 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000e76:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <RCC_APB2PeriphClockCmd+0x38>)
 8000e78:	4a08      	ldr	r2, [pc, #32]	; (8000e9c <RCC_APB2PeriphClockCmd+0x38>)
 8000e7a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8000e7c:	687a      	ldr	r2, [r7, #4]
 8000e7e:	430a      	orrs	r2, r1
 8000e80:	645a      	str	r2, [r3, #68]	; 0x44
 8000e82:	e006      	b.n	8000e92 <RCC_APB2PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000e84:	4b05      	ldr	r3, [pc, #20]	; (8000e9c <RCC_APB2PeriphClockCmd+0x38>)
 8000e86:	4a05      	ldr	r2, [pc, #20]	; (8000e9c <RCC_APB2PeriphClockCmd+0x38>)
 8000e88:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	43d2      	mvns	r2, r2
 8000e8e:	400a      	ands	r2, r1
 8000e90:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	40023800 	.word	0x40023800

08000ea0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b087      	sub	sp, #28
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	617b      	str	r3, [r7, #20]
 8000eae:	2300      	movs	r3, #0
 8000eb0:	613b      	str	r3, [r7, #16]
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	617b      	str	r3, [r7, #20]
 8000eba:	e076      	b.n	8000faa <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000ed0:	68fa      	ldr	r2, [r7, #12]
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d165      	bne.n	8000fa4 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	2103      	movs	r1, #3
 8000ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	401a      	ands	r2, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	791b      	ldrb	r3, [r3, #4]
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	fa01 f303 	lsl.w	r3, r1, r3
 8000f00:	431a      	orrs	r2, r3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	791b      	ldrb	r3, [r3, #4]
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d003      	beq.n	8000f16 <GPIO_Init+0x76>
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	791b      	ldrb	r3, [r3, #4]
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	d12e      	bne.n	8000f74 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	689a      	ldr	r2, [r3, #8]
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	2103      	movs	r1, #3
 8000f20:	fa01 f303 	lsl.w	r3, r1, r3
 8000f24:	43db      	mvns	r3, r3
 8000f26:	401a      	ands	r2, r3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	689a      	ldr	r2, [r3, #8]
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	795b      	ldrb	r3, [r3, #5]
 8000f34:	4619      	mov	r1, r3
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3e:	431a      	orrs	r2, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	685a      	ldr	r2, [r3, #4]
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	b29b      	uxth	r3, r3
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f52:	43db      	mvns	r3, r3
 8000f54:	401a      	ands	r2, r3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	685a      	ldr	r2, [r3, #4]
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	799b      	ldrb	r3, [r3, #6]
 8000f62:	4619      	mov	r1, r3
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	b29b      	uxth	r3, r3
 8000f68:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6c:	b29b      	uxth	r3, r3
 8000f6e:	431a      	orrs	r2, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	68da      	ldr	r2, [r3, #12]
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	2103      	movs	r1, #3
 8000f80:	fa01 f303 	lsl.w	r3, r1, r3
 8000f84:	43db      	mvns	r3, r3
 8000f86:	401a      	ands	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	68da      	ldr	r2, [r3, #12]
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	79db      	ldrb	r3, [r3, #7]
 8000f94:	4619      	mov	r1, r3
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9e:	431a      	orrs	r2, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	617b      	str	r3, [r7, #20]
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	2b0f      	cmp	r3, #15
 8000fae:	d985      	bls.n	8000ebc <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8000fb0:	371c      	adds	r7, #28
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop

08000fbc <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	887a      	ldrh	r2, [r7, #2]
 8000fcc:	831a      	strh	r2, [r3, #24]
}
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	887a      	ldrh	r2, [r7, #2]
 8000fe8:	835a      	strh	r2, [r3, #26]
}
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	460a      	mov	r2, r1
 8001000:	807a      	strh	r2, [r7, #2]
 8001002:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8001004:	2300      	movs	r3, #0
 8001006:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8001008:	2300      	movs	r3, #0
 800100a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800100c:	787a      	ldrb	r2, [r7, #1]
 800100e:	887b      	ldrh	r3, [r7, #2]
 8001010:	f003 0307 	and.w	r3, r3, #7
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800101c:	887b      	ldrh	r3, [r7, #2]
 800101e:	08db      	lsrs	r3, r3, #3
 8001020:	b29b      	uxth	r3, r3
 8001022:	461a      	mov	r2, r3
 8001024:	887b      	ldrh	r3, [r7, #2]
 8001026:	08db      	lsrs	r3, r3, #3
 8001028:	b29b      	uxth	r3, r3
 800102a:	4619      	mov	r1, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3108      	adds	r1, #8
 8001030:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8001034:	887b      	ldrh	r3, [r7, #2]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	200f      	movs	r0, #15
 800103e:	fa00 f303 	lsl.w	r3, r0, r3
 8001042:	43db      	mvns	r3, r3
 8001044:	4019      	ands	r1, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	3208      	adds	r2, #8
 800104a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800104e:	887b      	ldrh	r3, [r7, #2]
 8001050:	08db      	lsrs	r3, r3, #3
 8001052:	b29b      	uxth	r3, r3
 8001054:	461a      	mov	r2, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	3208      	adds	r2, #8
 800105a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	4313      	orrs	r3, r2
 8001062:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8001064:	887b      	ldrh	r3, [r7, #2]
 8001066:	08db      	lsrs	r3, r3, #3
 8001068:	b29b      	uxth	r3, r3
 800106a:	461a      	mov	r2, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3208      	adds	r2, #8
 8001070:	68b9      	ldr	r1, [r7, #8]
 8001072:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001076:	3714      	adds	r7, #20
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001094:	68fa      	ldr	r2, [r7, #12]
 8001096:	4b24      	ldr	r3, [pc, #144]	; (8001128 <DMA_Init+0xa8>)
 8001098:	4013      	ands	r3, r2
 800109a:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80010aa:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80010b6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	6a1b      	ldr	r3, [r3, #32]
 80010bc:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80010c2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010c8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80010ce:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010d4:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80010d6:	68fa      	ldr	r2, [r7, #12]
 80010d8:	4313      	orrs	r3, r2
 80010da:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	68fa      	ldr	r2, [r7, #12]
 80010e0:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	695b      	ldr	r3, [r3, #20]
 80010e6:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f023 0307 	bic.w	r3, r3, #7
 80010ee:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f8:	4313      	orrs	r3, r2
 80010fa:	68fa      	ldr	r2, [r7, #12]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	68fa      	ldr	r2, [r7, #12]
 8001104:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	691a      	ldr	r2, [r3, #16]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685a      	ldr	r2, [r3, #4]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	689a      	ldr	r2, [r3, #8]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	60da      	str	r2, [r3, #12]
}
 800111e:	3714      	adds	r7, #20
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	f01c803f 	.word	0xf01c803f

0800112c <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	460b      	mov	r3, r1
 8001136:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001138:	78fb      	ldrb	r3, [r7, #3]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d006      	beq.n	800114c <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f043 0201 	orr.w	r2, r3, #1
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	e005      	b.n	8001158 <DMA_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f023 0201 	bic.w	r2, r3, #1
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	601a      	str	r2, [r3, #0]
  }
}
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop

08001164 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 800116c:	2300      	movs	r3, #0
 800116e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f003 0301 	and.w	r3, r3, #1
 8001178:	2b00      	cmp	r3, #0
 800117a:	d002      	beq.n	8001182 <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 800117c:	2301      	movs	r3, #1
 800117e:	73fb      	strb	r3, [r7, #15]
 8001180:	e001      	b.n	8001186 <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8001182:	2300      	movs	r3, #0
 8001184:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8001186:	7bfb      	ldrb	r3, [r7, #15]
}
 8001188:	4618      	mov	r0, r3
 800118a:	3714      	adds	r7, #20
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8001194:	b480      	push	{r7}
 8001196:	b087      	sub	sp, #28
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800119e:	2300      	movs	r3, #0
 80011a0:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 80011a2:	2300      	movs	r3, #0
 80011a4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	4b15      	ldr	r3, [pc, #84]	; (8001200 <DMA_GetFlagStatus+0x6c>)
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d802      	bhi.n	80011b4 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80011ae:	4b15      	ldr	r3, [pc, #84]	; (8001204 <DMA_GetFlagStatus+0x70>)
 80011b0:	613b      	str	r3, [r7, #16]
 80011b2:	e001      	b.n	80011b8 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80011b4:	4b14      	ldr	r3, [pc, #80]	; (8001208 <DMA_GetFlagStatus+0x74>)
 80011b6:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d003      	beq.n	80011ca <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	e002      	b.n	80011d0 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80011d6:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80011da:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 80011dc:	68fa      	ldr	r2, [r7, #12]
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	4013      	ands	r3, r2
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d002      	beq.n	80011ec <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 80011e6:	2301      	movs	r3, #1
 80011e8:	75fb      	strb	r3, [r7, #23]
 80011ea:	e001      	b.n	80011f0 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 80011ec:	2300      	movs	r3, #0
 80011ee:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 80011f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	371c      	adds	r7, #28
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	4002640f 	.word	0x4002640f
 8001204:	40026000 	.word	0x40026000
 8001208:	40026400 	.word	0x40026400

0800120c <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	4b10      	ldr	r3, [pc, #64]	; (800125c <DMA_ClearFlag+0x50>)
 800121a:	429a      	cmp	r2, r3
 800121c:	d802      	bhi.n	8001224 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800121e:	4b10      	ldr	r3, [pc, #64]	; (8001260 <DMA_ClearFlag+0x54>)
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	e001      	b.n	8001228 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8001224:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <DMA_ClearFlag+0x58>)
 8001226:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d007      	beq.n	8001242 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8001238:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800123c:	68fa      	ldr	r2, [r7, #12]
 800123e:	60d3      	str	r3, [r2, #12]
 8001240:	e006      	b.n	8001250 <DMA_ClearFlag+0x44>
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8001248:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800124c:	68fa      	ldr	r2, [r7, #12]
 800124e:	6093      	str	r3, [r2, #8]
  }    
}
 8001250:	3714      	adds	r7, #20
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	4002640f 	.word	0x4002640f
 8001260:	40026000 	.word	0x40026000
 8001264:	40026400 	.word	0x40026400

08001268 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	460b      	mov	r3, r1
 8001272:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8001274:	2300      	movs	r3, #0
 8001276:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8001278:	4b07      	ldr	r3, [pc, #28]	; (8001298 <DAC_SetChannel1Data+0x30>)
 800127a:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 800127c:	68fa      	ldr	r2, [r7, #12]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4413      	add	r3, r2
 8001282:	3308      	adds	r3, #8
 8001284:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	887a      	ldrh	r2, [r7, #2]
 800128a:	601a      	str	r2, [r3, #0]
}
 800128c:	3714      	adds	r7, #20
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	40007400 	.word	0x40007400

0800129c <_ZN3PwmC1EP12GPIO_TypeDefmP11TIM_TypeDefhhh>:
 *  Created on: Mar 12, 2016
 *      Author: lenovoi7
 */

#include "Pwm.h"
Pwm::Pwm(GPIO_TypeDef* Port, uint32_t Pin, TIM_TypeDef * Tim, uint8_t Af_Pin, uint8_t Af, uint8_t Channel)
 800129c:	b580      	push	{r7, lr}
 800129e:	b08e      	sub	sp, #56	; 0x38
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	607a      	str	r2, [r7, #4]
 80012a8:	603b      	str	r3, [r7, #0]
{
	if(Port == GPIOA)
 80012aa:	68ba      	ldr	r2, [r7, #8]
 80012ac:	4b5f      	ldr	r3, [pc, #380]	; (800142c <_ZN3PwmC1EP12GPIO_TypeDefmP11TIM_TypeDefhhh+0x190>)
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d103      	bne.n	80012ba <_ZN3PwmC1EP12GPIO_TypeDefmP11TIM_TypeDefhhh+0x1e>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80012b2:	2001      	movs	r0, #1
 80012b4:	2101      	movs	r1, #1
 80012b6:	f7ff fd99 	bl	8000dec <RCC_AHB1PeriphClockCmd>
	if(Port == GPIOB)
 80012ba:	68ba      	ldr	r2, [r7, #8]
 80012bc:	4b5c      	ldr	r3, [pc, #368]	; (8001430 <_ZN3PwmC1EP12GPIO_TypeDefmP11TIM_TypeDefhhh+0x194>)
 80012be:	429a      	cmp	r2, r3
 80012c0:	d103      	bne.n	80012ca <_ZN3PwmC1EP12GPIO_TypeDefmP11TIM_TypeDefhhh+0x2e>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 80012c2:	2002      	movs	r0, #2
 80012c4:	2101      	movs	r1, #1
 80012c6:	f7ff fd91 	bl	8000dec <RCC_AHB1PeriphClockCmd>
	if(Port == GPIOC)
 80012ca:	68ba      	ldr	r2, [r7, #8]
 80012cc:	4b59      	ldr	r3, [pc, #356]	; (8001434 <_ZN3PwmC1EP12GPIO_TypeDefmP11TIM_TypeDefhhh+0x198>)
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d103      	bne.n	80012da <_ZN3PwmC1EP12GPIO_TypeDefmP11TIM_TypeDefhhh+0x3e>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 80012d2:	2004      	movs	r0, #4
 80012d4:	2101      	movs	r1, #1
 80012d6:	f7ff fd89 	bl	8000dec <RCC_AHB1PeriphClockCmd>
	if(Port == GPIOD)
 80012da:	68ba      	ldr	r2, [r7, #8]
 80012dc:	4b56      	ldr	r3, [pc, #344]	; (8001438 <_ZN3PwmC1EP12GPIO_TypeDefmP11TIM_TypeDefhhh+0x19c>)
 80012de:	429a      	cmp	r2, r3
 80012e0:	d103      	bne.n	80012ea <_ZN3PwmC1EP12GPIO_TypeDefmP11TIM_TypeDefhhh+0x4e>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 80012e2:	2008      	movs	r0, #8
 80012e4:	2101      	movs	r1, #1
 80012e6:	f7ff fd81 	bl	8000dec <RCC_AHB1PeriphClockCmd>
	if(Port == GPIOE)
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	4b53      	ldr	r3, [pc, #332]	; (800143c <_ZN3PwmC1EP12GPIO_TypeDefmP11TIM_TypeDefhhh+0x1a0>)
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d103      	bne.n	80012fa <_ZN3PwmC1EP12GPIO_TypeDefmP11TIM_TypeDefhhh+0x5e>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 80012f2:	2010      	movs	r0, #16
 80012f4:	2101      	movs	r1, #1
 80012f6:	f7ff fd79 	bl	8000dec <RCC_AHB1PeriphClockCmd>
	if(Tim == TIM1)
 80012fa:	683a      	ldr	r2, [r7, #0]
 80012fc:	4b50      	ldr	r3, [pc, #320]	; (8001440 <_ZN3PwmC1EP12GPIO_TypeDefmP11TIM_TypeDefhhh+0x1a4>)
 80012fe:	429a      	cmp	r2, r3
 8001300:	d103      	bne.n	800130a <_ZN3PwmC1EP12GPIO_TypeDefmP11TIM_TypeDefhhh+0x6e>
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 8001302:	2001      	movs	r0, #1
 8001304:	2101      	movs	r1, #1
 8001306:	f7ff fdad 	bl	8000e64 <RCC_APB2PeriphClockCmd>
	if(Tim == TIM8)
 800130a:	683a      	ldr	r2, [r7, #0]
 800130c:	4b4d      	ldr	r3, [pc, #308]	; (8001444 <_ZN3PwmC1EP12GPIO_TypeDefmP11TIM_TypeDefhhh+0x1a8>)
 800130e:	429a      	cmp	r2, r3
 8001310:	d103      	bne.n	800131a <_ZN3PwmC1EP12GPIO_TypeDefmP11TIM_TypeDefhhh+0x7e>
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM8, ENABLE);
 8001312:	2002      	movs	r0, #2
 8001314:	2101      	movs	r1, #1
 8001316:	f7ff fda5 	bl	8000e64 <RCC_APB2PeriphClockCmd>

	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800131a:	2302      	movs	r3, #2
 800131c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001320:	2300      	movs	r3, #0
 8001322:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001326:	2302      	movs	r3, #2
 8001328:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 800132c:	2301      	movs	r3, #1
 800132e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	GPIO_InitStructure.GPIO_Pin =  Pin;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_Init(Port, &GPIO_InitStructure); //onias
 8001336:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800133a:	68b8      	ldr	r0, [r7, #8]
 800133c:	4619      	mov	r1, r3
 800133e:	f7ff fdaf 	bl	8000ea0 <GPIO_Init>
	GPIO_PinAFConfig(Port, Af_Pin, Af);
 8001342:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001346:	b29a      	uxth	r2, r3
 8001348:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800134c:	68b8      	ldr	r0, [r7, #8]
 800134e:	4611      	mov	r1, r2
 8001350:	461a      	mov	r2, r3
 8001352:	f7ff fe4f 	bl	8000ff4 <GPIO_PinAFConfig>

	TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStruct;
	TIM_TimeBaseInitStruct.TIM_ClockDivision = TIM_CKD_DIV1;
 8001356:	2300      	movs	r3, #0
 8001358:	85bb      	strh	r3, [r7, #44]	; 0x2c
	TIM_TimeBaseInitStruct.TIM_CounterMode = TIM_CounterMode_Up;
 800135a:	2300      	movs	r3, #0
 800135c:	84fb      	strh	r3, [r7, #38]	; 0x26
	TIM_TimeBaseInitStruct.TIM_Period = 1000;
 800135e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001362:	62bb      	str	r3, [r7, #40]	; 0x28
	TIM_TimeBaseInitStruct.TIM_Prescaler = 40;
 8001364:	2328      	movs	r3, #40	; 0x28
 8001366:	84bb      	strh	r3, [r7, #36]	; 0x24

	TIM_TimeBaseInit(Tim, &TIM_TimeBaseInitStruct);
 8001368:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800136c:	6838      	ldr	r0, [r7, #0]
 800136e:	4619      	mov	r1, r3
 8001370:	f7ff f954 	bl	800061c <TIM_TimeBaseInit>

	TIM_OCInitTypeDef TIM_OCInitStructure;
	TIM_OCInitStructure.TIM_OCMode=TIM_OCMode_PWM1;
 8001374:	2360      	movs	r3, #96	; 0x60
 8001376:	823b      	strh	r3, [r7, #16]
	TIM_OCInitStructure.TIM_OutputState=TIM_OutputState_Enable;
 8001378:	2301      	movs	r3, #1
 800137a:	827b      	strh	r3, [r7, #18]
	TIM_OCInitStructure.TIM_OutputNState=TIM_OutputNState_Disable;
 800137c:	2300      	movs	r3, #0
 800137e:	82bb      	strh	r3, [r7, #20]
	TIM_OCInitStructure.TIM_Pulse=1000;
 8001380:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001384:	61bb      	str	r3, [r7, #24]
	TIM_OCInitStructure.TIM_OCPolarity=TIM_OCPolarity_High;
 8001386:	2300      	movs	r3, #0
 8001388:	83bb      	strh	r3, [r7, #28]
	TIM_OCInitStructure.TIM_OCIdleState=TIM_OCIdleState_Set;
 800138a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800138e:	843b      	strh	r3, [r7, #32]

	if(Channel==1){
 8001390:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001394:	2b01      	cmp	r3, #1
 8001396:	d109      	bne.n	80013ac <_ZN3PwmC1EP12GPIO_TypeDefmP11TIM_TypeDefhhh+0x110>
		TIM_OC1Init(Tim, &TIM_OCInitStructure);
 8001398:	f107 0310 	add.w	r3, r7, #16
 800139c:	6838      	ldr	r0, [r7, #0]
 800139e:	4619      	mov	r1, r3
 80013a0:	f7ff f9f4 	bl	800078c <TIM_OC1Init>
		TIM_OC1PreloadConfig(Tim, TIM_OCPreload_Enable);
 80013a4:	6838      	ldr	r0, [r7, #0]
 80013a6:	2108      	movs	r1, #8
 80013a8:	f7ff fc16 	bl	8000bd8 <TIM_OC1PreloadConfig>
	}
	if(Channel==2){
 80013ac:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d109      	bne.n	80013c8 <_ZN3PwmC1EP12GPIO_TypeDefmP11TIM_TypeDefhhh+0x12c>
		TIM_OC2Init(Tim, &TIM_OCInitStructure);
 80013b4:	f107 0310 	add.w	r3, r7, #16
 80013b8:	6838      	ldr	r0, [r7, #0]
 80013ba:	4619      	mov	r1, r3
 80013bc:	f7ff fa60 	bl	8000880 <TIM_OC2Init>
		TIM_OC2PreloadConfig(Tim, TIM_OCPreload_Enable);
 80013c0:	6838      	ldr	r0, [r7, #0]
 80013c2:	2108      	movs	r1, #8
 80013c4:	f7ff fc24 	bl	8000c10 <TIM_OC2PreloadConfig>
	}
	if(Channel==3){
 80013c8:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80013cc:	2b03      	cmp	r3, #3
 80013ce:	d109      	bne.n	80013e4 <_ZN3PwmC1EP12GPIO_TypeDefmP11TIM_TypeDefhhh+0x148>
		TIM_OC3Init(Tim, &TIM_OCInitStructure);
 80013d0:	f107 0310 	add.w	r3, r7, #16
 80013d4:	6838      	ldr	r0, [r7, #0]
 80013d6:	4619      	mov	r1, r3
 80013d8:	f7ff fada 	bl	8000990 <TIM_OC3Init>
		TIM_OC3PreloadConfig(Tim, TIM_OCPreload_Enable);
 80013dc:	6838      	ldr	r0, [r7, #0]
 80013de:	2108      	movs	r1, #8
 80013e0:	f7ff fc34 	bl	8000c4c <TIM_OC3PreloadConfig>
	}
	if(Channel==4){
 80013e4:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80013e8:	2b04      	cmp	r3, #4
 80013ea:	d109      	bne.n	8001400 <_ZN3PwmC1EP12GPIO_TypeDefmP11TIM_TypeDefhhh+0x164>
		TIM_OC4Init(Tim, &TIM_OCInitStructure);
 80013ec:	f107 0310 	add.w	r3, r7, #16
 80013f0:	6838      	ldr	r0, [r7, #0]
 80013f2:	4619      	mov	r1, r3
 80013f4:	f7ff fb52 	bl	8000a9c <TIM_OC4Init>
		TIM_OC4PreloadConfig(Tim, TIM_OCPreload_Enable);
 80013f8:	6838      	ldr	r0, [r7, #0]
 80013fa:	2108      	movs	r1, #8
 80013fc:	f7ff fc42 	bl	8000c84 <TIM_OC4PreloadConfig>
	}

	TIM_ARRPreloadConfig(Tim, ENABLE);
 8001400:	6838      	ldr	r0, [r7, #0]
 8001402:	2101      	movs	r1, #1
 8001404:	f7ff f982 	bl	800070c <TIM_ARRPreloadConfig>

	TIM_Cmd(Tim, ENABLE);
 8001408:	6838      	ldr	r0, [r7, #0]
 800140a:	2101      	movs	r1, #1
 800140c:	f7ff f99e 	bl	800074c <TIM_Cmd>
	TIM_CtrlPWMOutputs(Tim,ENABLE);
 8001410:	6838      	ldr	r0, [r7, #0]
 8001412:	2101      	movs	r1, #1
 8001414:	f7ff fc54 	bl	8000cc0 <TIM_CtrlPWMOutputs>
	PWM_Channel = Channel;
 8001418:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	701a      	strb	r2, [r3, #0]
};
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	4618      	mov	r0, r3
 8001424:	3738      	adds	r7, #56	; 0x38
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40020000 	.word	0x40020000
 8001430:	40020400 	.word	0x40020400
 8001434:	40020800 	.word	0x40020800
 8001438:	40020c00 	.word	0x40020c00
 800143c:	40021000 	.word	0x40021000
 8001440:	40010000 	.word	0x40010000
 8001444:	40010400 	.word	0x40010400

08001448 <_ZN3Pwm13set_DutyCycleEt>:

void Pwm::set_DutyCycle(uint16_t duty_cycle1){
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	460b      	mov	r3, r1
 8001452:	807b      	strh	r3, [r7, #2]
	if(PWM_Channel == 1)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	b25b      	sxtb	r3, r3
 800145a:	2b01      	cmp	r3, #1
 800145c:	d104      	bne.n	8001468 <_ZN3Pwm13set_DutyCycleEt+0x20>
		TIM_SetCompare1(TIM1, duty_cycle1);
 800145e:	887b      	ldrh	r3, [r7, #2]
 8001460:	4812      	ldr	r0, [pc, #72]	; (80014ac <_ZN3Pwm13set_DutyCycleEt+0x64>)
 8001462:	4619      	mov	r1, r3
 8001464:	f7ff fb80 	bl	8000b68 <TIM_SetCompare1>
	if(PWM_Channel == 2)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	b25b      	sxtb	r3, r3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d104      	bne.n	800147c <_ZN3Pwm13set_DutyCycleEt+0x34>
		TIM_SetCompare2(TIM1, duty_cycle1);
 8001472:	887b      	ldrh	r3, [r7, #2]
 8001474:	480d      	ldr	r0, [pc, #52]	; (80014ac <_ZN3Pwm13set_DutyCycleEt+0x64>)
 8001476:	4619      	mov	r1, r3
 8001478:	f7ff fb84 	bl	8000b84 <TIM_SetCompare2>
	if(PWM_Channel == 3)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	b25b      	sxtb	r3, r3
 8001482:	2b03      	cmp	r3, #3
 8001484:	d104      	bne.n	8001490 <_ZN3Pwm13set_DutyCycleEt+0x48>
		TIM_SetCompare3(TIM1, duty_cycle1);
 8001486:	887b      	ldrh	r3, [r7, #2]
 8001488:	4808      	ldr	r0, [pc, #32]	; (80014ac <_ZN3Pwm13set_DutyCycleEt+0x64>)
 800148a:	4619      	mov	r1, r3
 800148c:	f7ff fb88 	bl	8000ba0 <TIM_SetCompare3>
	if(PWM_Channel == 4)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	b25b      	sxtb	r3, r3
 8001496:	2b04      	cmp	r3, #4
 8001498:	d104      	bne.n	80014a4 <_ZN3Pwm13set_DutyCycleEt+0x5c>
		TIM_SetCompare4(TIM1, duty_cycle1);
 800149a:	887b      	ldrh	r3, [r7, #2]
 800149c:	4803      	ldr	r0, [pc, #12]	; (80014ac <_ZN3Pwm13set_DutyCycleEt+0x64>)
 800149e:	4619      	mov	r1, r3
 80014a0:	f7ff fb8c 	bl	8000bbc <TIM_SetCompare4>
};
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40010000 	.word	0x40010000

080014b0 <_ZN5MotorC1EP3PwmP4GPIOS1_S3_P7Encoder>:
 *  Created on: Mar 12, 2016
 *      Author: lenovoi7
 */
#include "Motor.h"

Motor::Motor(Pwm *A_High,
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
 80014bc:	603b      	str	r3, [r7, #0]
		GPIO *A_Low,
		Pwm *B_High,
		GPIO *B_Low,
		Encoder *Enc)
{
	Motor_A_High = A_High;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	68ba      	ldr	r2, [r7, #8]
 80014c2:	601a      	str	r2, [r3, #0]
	Motor_A_Low = A_Low;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	609a      	str	r2, [r3, #8]
	Motor_B_High = B_High;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	683a      	ldr	r2, [r7, #0]
 80014ce:	605a      	str	r2, [r3, #4]
	Motor_B_Low = B_Low;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	60da      	str	r2, [r3, #12]
	Motor_Enc = Enc;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	69fa      	ldr	r2, [r7, #28]
 80014da:	611a      	str	r2, [r3, #16]
}
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	4618      	mov	r0, r3
 80014e0:	3714      	adds	r7, #20
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop

080014ec <_ZN5Motor6AnswerEs>:
void Motor::Control_Speed(int16_t hold_speed){

};

void Motor::Answer(int16_t answer)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	460b      	mov	r3, r1
 80014f6:	807b      	strh	r3, [r7, #2]
	if (answer > 0)
 80014f8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	dd23      	ble.n	8001548 <_ZN5Motor6AnswerEs+0x5c>
	{
		if (answer>1000)
 8001500:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001504:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001508:	dd02      	ble.n	8001510 <_ZN5Motor6AnswerEs+0x24>
		{
			answer=1000;
 800150a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800150e:	807b      	strh	r3, [r7, #2]
		}
		Motor_A_Low->Reset();
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	4618      	mov	r0, r3
 8001516:	f000 f8ab 	bl	8001670 <_ZN4GPIO5ResetEv>
		Motor_B_High->set_DutyCycle(1000);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	4618      	mov	r0, r3
 8001520:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001524:	f7ff ff90 	bl	8001448 <_ZN3Pwm13set_DutyCycleEt>
		Motor_A_High->set_DutyCycle(1000-answer);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	887b      	ldrh	r3, [r7, #2]
 800152e:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8001532:	b29b      	uxth	r3, r3
 8001534:	4610      	mov	r0, r2
 8001536:	4619      	mov	r1, r3
 8001538:	f7ff ff86 	bl	8001448 <_ZN3Pwm13set_DutyCycleEt>
		Motor_B_Low->Set();
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	4618      	mov	r0, r3
 8001542:	f000 f885 	bl	8001650 <_ZN4GPIO3SetEv>
 8001546:	e026      	b.n	8001596 <_ZN5Motor6AnswerEs+0xaa>
	}
	else
	{
		answer=-answer;
 8001548:	887b      	ldrh	r3, [r7, #2]
 800154a:	425b      	negs	r3, r3
 800154c:	b29b      	uxth	r3, r3
 800154e:	807b      	strh	r3, [r7, #2]
		if(answer>1000)
 8001550:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001554:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001558:	dd02      	ble.n	8001560 <_ZN5Motor6AnswerEs+0x74>
		{
			answer=1000;
 800155a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800155e:	807b      	strh	r3, [r7, #2]
		}
		Motor_B_Low->Reset();
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	4618      	mov	r0, r3
 8001566:	f000 f883 	bl	8001670 <_ZN4GPIO5ResetEv>
		Motor_A_High->set_DutyCycle(1000);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001574:	f7ff ff68 	bl	8001448 <_ZN3Pwm13set_DutyCycleEt>
		Motor_B_High->set_DutyCycle(1000-answer);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685a      	ldr	r2, [r3, #4]
 800157c:	887b      	ldrh	r3, [r7, #2]
 800157e:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8001582:	b29b      	uxth	r3, r3
 8001584:	4610      	mov	r0, r2
 8001586:	4619      	mov	r1, r3
 8001588:	f7ff ff5e 	bl	8001448 <_ZN3Pwm13set_DutyCycleEt>
		Motor_A_Low->Set();
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	4618      	mov	r0, r3
 8001592:	f000 f85d 	bl	8001650 <_ZN4GPIO3SetEv>
	}
}
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <_ZN4GPIOC1EP12GPIO_TypeDeft>:
 *  Created on: Mar 12, 2016
 *      Author: lenovoi7
 */

#include "GPIO.h"
GPIO::GPIO(GPIO_TypeDef* Port, uint16_t Pin) {
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	4613      	mov	r3, r2
 80015a8:	80fb      	strh	r3, [r7, #6]
	if(Port == GPIOA)
 80015aa:	68ba      	ldr	r2, [r7, #8]
 80015ac:	4b23      	ldr	r3, [pc, #140]	; (800163c <_ZN4GPIOC1EP12GPIO_TypeDeft+0xa0>)
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d103      	bne.n	80015ba <_ZN4GPIOC1EP12GPIO_TypeDeft+0x1e>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80015b2:	2001      	movs	r0, #1
 80015b4:	2101      	movs	r1, #1
 80015b6:	f7ff fc19 	bl	8000dec <RCC_AHB1PeriphClockCmd>
	if(Port == GPIOB)
 80015ba:	68ba      	ldr	r2, [r7, #8]
 80015bc:	4b20      	ldr	r3, [pc, #128]	; (8001640 <_ZN4GPIOC1EP12GPIO_TypeDeft+0xa4>)
 80015be:	429a      	cmp	r2, r3
 80015c0:	d103      	bne.n	80015ca <_ZN4GPIOC1EP12GPIO_TypeDeft+0x2e>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 80015c2:	2002      	movs	r0, #2
 80015c4:	2101      	movs	r1, #1
 80015c6:	f7ff fc11 	bl	8000dec <RCC_AHB1PeriphClockCmd>
	if(Port == GPIOC)
 80015ca:	68ba      	ldr	r2, [r7, #8]
 80015cc:	4b1d      	ldr	r3, [pc, #116]	; (8001644 <_ZN4GPIOC1EP12GPIO_TypeDeft+0xa8>)
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d103      	bne.n	80015da <_ZN4GPIOC1EP12GPIO_TypeDeft+0x3e>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 80015d2:	2004      	movs	r0, #4
 80015d4:	2101      	movs	r1, #1
 80015d6:	f7ff fc09 	bl	8000dec <RCC_AHB1PeriphClockCmd>
	if(Port == GPIOD)
 80015da:	68ba      	ldr	r2, [r7, #8]
 80015dc:	4b1a      	ldr	r3, [pc, #104]	; (8001648 <_ZN4GPIOC1EP12GPIO_TypeDeft+0xac>)
 80015de:	429a      	cmp	r2, r3
 80015e0:	d103      	bne.n	80015ea <_ZN4GPIOC1EP12GPIO_TypeDeft+0x4e>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 80015e2:	2008      	movs	r0, #8
 80015e4:	2101      	movs	r1, #1
 80015e6:	f7ff fc01 	bl	8000dec <RCC_AHB1PeriphClockCmd>
	if(Port == GPIOE)
 80015ea:	68ba      	ldr	r2, [r7, #8]
 80015ec:	4b17      	ldr	r3, [pc, #92]	; (800164c <_ZN4GPIOC1EP12GPIO_TypeDeft+0xb0>)
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d103      	bne.n	80015fa <_ZN4GPIOC1EP12GPIO_TypeDeft+0x5e>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 80015f2:	2010      	movs	r0, #16
 80015f4:	2101      	movs	r1, #1
 80015f6:	f7ff fbf9 	bl	8000dec <RCC_AHB1PeriphClockCmd>
	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80015fa:	2301      	movs	r3, #1
 80015fc:	753b      	strb	r3, [r7, #20]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80015fe:	2300      	movs	r3, #0
 8001600:	75bb      	strb	r3, [r7, #22]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001602:	2302      	movs	r3, #2
 8001604:	757b      	strb	r3, [r7, #21]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8001606:	2301      	movs	r3, #1
 8001608:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStructure.GPIO_Pin = Pin;
 800160a:	88fb      	ldrh	r3, [r7, #6]
 800160c:	613b      	str	r3, [r7, #16]
	GPIO_Init(Port,&GPIO_InitStructure);
 800160e:	f107 0310 	add.w	r3, r7, #16
 8001612:	68b8      	ldr	r0, [r7, #8]
 8001614:	4619      	mov	r1, r3
 8001616:	f7ff fc43 	bl	8000ea0 <GPIO_Init>

	GPIO_ResetBits(Port, Pin);
 800161a:	88fb      	ldrh	r3, [r7, #6]
 800161c:	68b8      	ldr	r0, [r7, #8]
 800161e:	4619      	mov	r1, r3
 8001620:	f7ff fcda 	bl	8000fd8 <GPIO_ResetBits>
	GPIO_Port = Port;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	68ba      	ldr	r2, [r7, #8]
 8001628:	601a      	str	r2, [r3, #0]
	GPIO_Pin = Pin;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	88fa      	ldrh	r2, [r7, #6]
 800162e:	809a      	strh	r2, [r3, #4]
}
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	4618      	mov	r0, r3
 8001634:	3718      	adds	r7, #24
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40020000 	.word	0x40020000
 8001640:	40020400 	.word	0x40020400
 8001644:	40020800 	.word	0x40020800
 8001648:	40020c00 	.word	0x40020c00
 800164c:	40021000 	.word	0x40021000

08001650 <_ZN4GPIO3SetEv>:
void GPIO::Set(){
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
	GPIO_SetBits(GPIO_Port, GPIO_Pin);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	889b      	ldrh	r3, [r3, #4]
 8001660:	4610      	mov	r0, r2
 8001662:	4619      	mov	r1, r3
 8001664:	f7ff fcaa 	bl	8000fbc <GPIO_SetBits>
}
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop

08001670 <_ZN4GPIO5ResetEv>:
void GPIO::Reset(){
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
	GPIO_ResetBits(GPIO_Port, GPIO_Pin);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	889b      	ldrh	r3, [r3, #4]
 8001680:	4610      	mov	r0, r2
 8001682:	4619      	mov	r1, r3
 8001684:	f7ff fca8 	bl	8000fd8 <GPIO_ResetBits>
}
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop

08001690 <_ZN7EncoderC1EP12GPIO_TypeDefS1_mmP11TIM_TypeDefhhh>:
 *      Author: lenovoi7
 */

#include <Encoder.h>

Encoder::Encoder( GPIO_TypeDef* Port1, GPIO_TypeDef* Port2,
 8001690:	b580      	push	{r7, lr}
 8001692:	b086      	sub	sp, #24
 8001694:	af00      	add	r7, sp, #0
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	60b9      	str	r1, [r7, #8]
 800169a:	607a      	str	r2, [r7, #4]
 800169c:	603b      	str	r3, [r7, #0]
	uint32_t Pin1, uint32_t Pin2,
	TIM_TypeDef * Tim, uint8_t Af_Pin1, uint8_t Af_Pin2,
	uint8_t Af)
{

	if((Port1 == GPIOA)||(Port2 == GPIOA))
 800169e:	68ba      	ldr	r2, [r7, #8]
 80016a0:	4b53      	ldr	r3, [pc, #332]	; (80017f0 <_ZN7EncoderC1EP12GPIO_TypeDefS1_mmP11TIM_TypeDefhhh+0x160>)
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d003      	beq.n	80016ae <_ZN7EncoderC1EP12GPIO_TypeDefS1_mmP11TIM_TypeDefhhh+0x1e>
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	4b51      	ldr	r3, [pc, #324]	; (80017f0 <_ZN7EncoderC1EP12GPIO_TypeDefS1_mmP11TIM_TypeDefhhh+0x160>)
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d103      	bne.n	80016b6 <_ZN7EncoderC1EP12GPIO_TypeDefS1_mmP11TIM_TypeDefhhh+0x26>
			RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80016ae:	2001      	movs	r0, #1
 80016b0:	2101      	movs	r1, #1
 80016b2:	f7ff fb9b 	bl	8000dec <RCC_AHB1PeriphClockCmd>
	if((Port1 == GPIOB)||(Port2 == GPIOB))
 80016b6:	68ba      	ldr	r2, [r7, #8]
 80016b8:	4b4e      	ldr	r3, [pc, #312]	; (80017f4 <_ZN7EncoderC1EP12GPIO_TypeDefS1_mmP11TIM_TypeDefhhh+0x164>)
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d003      	beq.n	80016c6 <_ZN7EncoderC1EP12GPIO_TypeDefS1_mmP11TIM_TypeDefhhh+0x36>
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	4b4c      	ldr	r3, [pc, #304]	; (80017f4 <_ZN7EncoderC1EP12GPIO_TypeDefS1_mmP11TIM_TypeDefhhh+0x164>)
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d103      	bne.n	80016ce <_ZN7EncoderC1EP12GPIO_TypeDefS1_mmP11TIM_TypeDefhhh+0x3e>
			RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 80016c6:	2002      	movs	r0, #2
 80016c8:	2101      	movs	r1, #1
 80016ca:	f7ff fb8f 	bl	8000dec <RCC_AHB1PeriphClockCmd>
	if((Port1 == GPIOC)||(Port2 == GPIOC))
 80016ce:	68ba      	ldr	r2, [r7, #8]
 80016d0:	4b49      	ldr	r3, [pc, #292]	; (80017f8 <_ZN7EncoderC1EP12GPIO_TypeDefS1_mmP11TIM_TypeDefhhh+0x168>)
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d003      	beq.n	80016de <_ZN7EncoderC1EP12GPIO_TypeDefS1_mmP11TIM_TypeDefhhh+0x4e>
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	4b47      	ldr	r3, [pc, #284]	; (80017f8 <_ZN7EncoderC1EP12GPIO_TypeDefS1_mmP11TIM_TypeDefhhh+0x168>)
 80016da:	429a      	cmp	r2, r3
 80016dc:	d103      	bne.n	80016e6 <_ZN7EncoderC1EP12GPIO_TypeDefS1_mmP11TIM_TypeDefhhh+0x56>
			RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 80016de:	2004      	movs	r0, #4
 80016e0:	2101      	movs	r1, #1
 80016e2:	f7ff fb83 	bl	8000dec <RCC_AHB1PeriphClockCmd>
	if((Port1 == GPIOD)||(Port2 == GPIOD))
 80016e6:	68ba      	ldr	r2, [r7, #8]
 80016e8:	4b44      	ldr	r3, [pc, #272]	; (80017fc <_ZN7EncoderC1EP12GPIO_TypeDefS1_mmP11TIM_TypeDefhhh+0x16c>)
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d003      	beq.n	80016f6 <_ZN7EncoderC1EP12GPIO_TypeDefS1_mmP11TIM_TypeDefhhh+0x66>
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	4b42      	ldr	r3, [pc, #264]	; (80017fc <_ZN7EncoderC1EP12GPIO_TypeDefS1_mmP11TIM_TypeDefhhh+0x16c>)
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d103      	bne.n	80016fe <_ZN7EncoderC1EP12GPIO_TypeDefS1_mmP11TIM_TypeDefhhh+0x6e>
			RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 80016f6:	2008      	movs	r0, #8
 80016f8:	2101      	movs	r1, #1
 80016fa:	f7ff fb77 	bl	8000dec <RCC_AHB1PeriphClockCmd>
	if((Port1 == GPIOE)||(Port2 == GPIOE))
 80016fe:	68ba      	ldr	r2, [r7, #8]
 8001700:	4b3f      	ldr	r3, [pc, #252]	; (8001800 <_ZN7EncoderC1EP12GPIO_TypeDefS1_mmP11TIM_TypeDefhhh+0x170>)
 8001702:	429a      	cmp	r2, r3
 8001704:	d003      	beq.n	800170e <_ZN7EncoderC1EP12GPIO_TypeDefS1_mmP11TIM_TypeDefhhh+0x7e>
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	4b3d      	ldr	r3, [pc, #244]	; (8001800 <_ZN7EncoderC1EP12GPIO_TypeDefS1_mmP11TIM_TypeDefhhh+0x170>)
 800170a:	429a      	cmp	r2, r3
 800170c:	d103      	bne.n	8001716 <_ZN7EncoderC1EP12GPIO_TypeDefS1_mmP11TIM_TypeDefhhh+0x86>
			RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 800170e:	2010      	movs	r0, #16
 8001710:	2101      	movs	r1, #1
 8001712:	f7ff fb6b 	bl	8000dec <RCC_AHB1PeriphClockCmd>

	if(Tim == TIM2)
 8001716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800171c:	d103      	bne.n	8001726 <_ZN7EncoderC1EP12GPIO_TypeDefS1_mmP11TIM_TypeDefhhh+0x96>
			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 800171e:	2001      	movs	r0, #1
 8001720:	2101      	movs	r1, #1
 8001722:	f7ff fb81 	bl	8000e28 <RCC_APB1PeriphClockCmd>
	if(Tim == TIM3)
 8001726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001728:	4b36      	ldr	r3, [pc, #216]	; (8001804 <_ZN7EncoderC1EP12GPIO_TypeDefS1_mmP11TIM_TypeDefhhh+0x174>)
 800172a:	429a      	cmp	r2, r3
 800172c:	d103      	bne.n	8001736 <_ZN7EncoderC1EP12GPIO_TypeDefS1_mmP11TIM_TypeDefhhh+0xa6>
			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 800172e:	2002      	movs	r0, #2
 8001730:	2101      	movs	r1, #1
 8001732:	f7ff fb79 	bl	8000e28 <RCC_APB1PeriphClockCmd>
	if(Tim == TIM4)
 8001736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001738:	4b33      	ldr	r3, [pc, #204]	; (8001808 <_ZN7EncoderC1EP12GPIO_TypeDefS1_mmP11TIM_TypeDefhhh+0x178>)
 800173a:	429a      	cmp	r2, r3
 800173c:	d103      	bne.n	8001746 <_ZN7EncoderC1EP12GPIO_TypeDefS1_mmP11TIM_TypeDefhhh+0xb6>
			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 800173e:	2004      	movs	r0, #4
 8001740:	2101      	movs	r1, #1
 8001742:	f7ff fb71 	bl	8000e28 <RCC_APB1PeriphClockCmd>
	if(Tim == TIM5)
 8001746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001748:	4b30      	ldr	r3, [pc, #192]	; (800180c <_ZN7EncoderC1EP12GPIO_TypeDefS1_mmP11TIM_TypeDefhhh+0x17c>)
 800174a:	429a      	cmp	r2, r3
 800174c:	d103      	bne.n	8001756 <_ZN7EncoderC1EP12GPIO_TypeDefS1_mmP11TIM_TypeDefhhh+0xc6>
			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5, ENABLE);
 800174e:	2008      	movs	r0, #8
 8001750:	2101      	movs	r1, #1
 8001752:	f7ff fb69 	bl	8000e28 <RCC_APB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8001756:	2001      	movs	r0, #1
 8001758:	2101      	movs	r1, #1
 800175a:	f7ff fb47 	bl	8000dec <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 800175e:	2002      	movs	r0, #2
 8001760:	2101      	movs	r1, #1
 8001762:	f7ff fb43 	bl	8000dec <RCC_AHB1PeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8001766:	2001      	movs	r0, #1
 8001768:	2101      	movs	r1, #1
 800176a:	f7ff fb5d 	bl	8000e28 <RCC_APB1PeriphClockCmd>

	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800176e:	2300      	movs	r3, #0
 8001770:	75bb      	strb	r3, [r7, #22]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001772:	2302      	movs	r3, #2
 8001774:	757b      	strb	r3, [r7, #21]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8001776:	2301      	movs	r3, #1
 8001778:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800177a:	2302      	movs	r3, #2
 800177c:	753b      	strb	r3, [r7, #20]

	GPIO_InitStructure.GPIO_Pin = Pin1;
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	613b      	str	r3, [r7, #16]
	GPIO_Init(Port1, &GPIO_InitStructure);
 8001782:	f107 0310 	add.w	r3, r7, #16
 8001786:	68b8      	ldr	r0, [r7, #8]
 8001788:	4619      	mov	r1, r3
 800178a:	f7ff fb89 	bl	8000ea0 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = Pin2;
 800178e:	6a3b      	ldr	r3, [r7, #32]
 8001790:	613b      	str	r3, [r7, #16]
	GPIO_Init(Port2, &GPIO_InitStructure);
 8001792:	f107 0310 	add.w	r3, r7, #16
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	4619      	mov	r1, r3
 800179a:	f7ff fb81 	bl	8000ea0 <GPIO_Init>

	GPIO_PinAFConfig(Port1, Af_Pin1, Af);
 800179e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80017a8:	68b8      	ldr	r0, [r7, #8]
 80017aa:	4611      	mov	r1, r2
 80017ac:	461a      	mov	r2, r3
 80017ae:	f7ff fc21 	bl	8000ff4 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(Port2, Af_Pin2, Af);
 80017b2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80017b6:	b29a      	uxth	r2, r3
 80017b8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	4611      	mov	r1, r2
 80017c0:	461a      	mov	r2, r3
 80017c2:	f7ff fc17 	bl	8000ff4 <GPIO_PinAFConfig>

	TIM_EncoderInterfaceConfig(Tim, TIM_EncoderMode_TI12, TIM_ICPolarity_Rising, TIM_ICPolarity_Rising);
 80017c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80017c8:	2103      	movs	r1, #3
 80017ca:	2200      	movs	r2, #0
 80017cc:	2300      	movs	r3, #0
 80017ce:	f7ff fa9d 	bl	8000d0c <TIM_EncoderInterfaceConfig>
	TIM_Cmd(Tim, ENABLE);
 80017d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80017d4:	2101      	movs	r1, #1
 80017d6:	f7fe ffb9 	bl	800074c <TIM_Cmd>

	TIM_SetCounter(Tim, (uint32_t) 16000);
 80017da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80017dc:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 80017e0:	f7fe ff86 	bl	80006f0 <TIM_SetCounter>
};
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	4618      	mov	r0, r3
 80017e8:	3718      	adds	r7, #24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40020000 	.word	0x40020000
 80017f4:	40020400 	.word	0x40020400
 80017f8:	40020800 	.word	0x40020800
 80017fc:	40020c00 	.word	0x40020c00
 8001800:	40021000 	.word	0x40021000
 8001804:	40000400 	.word	0x40000400
 8001808:	40000800 	.word	0x40000800
 800180c:	40000c00 	.word	0x40000c00

08001810 <__libc_init_array>:
 8001810:	b570      	push	{r4, r5, r6, lr}
 8001812:	4b0e      	ldr	r3, [pc, #56]	; (800184c <__libc_init_array+0x3c>)
 8001814:	4d0e      	ldr	r5, [pc, #56]	; (8001850 <__libc_init_array+0x40>)
 8001816:	1aed      	subs	r5, r5, r3
 8001818:	10ad      	asrs	r5, r5, #2
 800181a:	2400      	movs	r4, #0
 800181c:	461e      	mov	r6, r3
 800181e:	42ac      	cmp	r4, r5
 8001820:	d004      	beq.n	800182c <__libc_init_array+0x1c>
 8001822:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8001826:	4790      	blx	r2
 8001828:	3401      	adds	r4, #1
 800182a:	e7f8      	b.n	800181e <__libc_init_array+0xe>
 800182c:	f000 f816 	bl	800185c <_init>
 8001830:	4d08      	ldr	r5, [pc, #32]	; (8001854 <__libc_init_array+0x44>)
 8001832:	4b09      	ldr	r3, [pc, #36]	; (8001858 <__libc_init_array+0x48>)
 8001834:	1aed      	subs	r5, r5, r3
 8001836:	10ad      	asrs	r5, r5, #2
 8001838:	2400      	movs	r4, #0
 800183a:	461e      	mov	r6, r3
 800183c:	42ac      	cmp	r4, r5
 800183e:	d004      	beq.n	800184a <__libc_init_array+0x3a>
 8001840:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8001844:	4790      	blx	r2
 8001846:	3401      	adds	r4, #1
 8001848:	e7f8      	b.n	800183c <__libc_init_array+0x2c>
 800184a:	bd70      	pop	{r4, r5, r6, pc}
 800184c:	08001874 	.word	0x08001874
 8001850:	08001874 	.word	0x08001874
 8001854:	08001878 	.word	0x08001878
 8001858:	08001874 	.word	0x08001874

0800185c <_init>:
 800185c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800185e:	bf00      	nop
 8001860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001862:	bc08      	pop	{r3}
 8001864:	469e      	mov	lr, r3
 8001866:	4770      	bx	lr

08001868 <_fini>:
 8001868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800186a:	bf00      	nop
 800186c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800186e:	bc08      	pop	{r3}
 8001870:	469e      	mov	lr, r3
 8001872:	4770      	bx	lr
