
Firmware_00.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002380  08000188  08000188  00008188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  08002508  08002508  0000a508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  0800250c  0800250c  0000a50c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000128  20000000  08002510  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000009c  20000128  20000128  00010128  2**2
                  ALLOC
  6 ._user_heap_stack 00000400  200001c4  200001c4  00010128  2**0
                  ALLOC
  7 .ARM.attributes 00000030  00000000  00000000  00010128  2**0
                  CONTENTS, READONLY
  8 .debug_info   00008849  00000000  00000000  00010158  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001849  00000000  00000000  000189a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000a28  00000000  00000000  0001a1f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000940  00000000  00000000  0001ac18  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00003540  00000000  00000000  0001b558  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003322  00000000  00000000  0001ea98  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      00000082  00000000  00000000  00021dba  2**0
                  CONTENTS, READONLY
 15 .debug_frame  00001ff8  00000000  00000000  00021e3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000128 	.word	0x20000128
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080024f0 	.word	0x080024f0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080024f0 	.word	0x080024f0
 80001c4:	2000012c 	.word	0x2000012c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__gedf2>:
 800095c:	f04f 3cff 	mov.w	ip, #4294967295
 8000960:	e006      	b.n	8000970 <__cmpdf2+0x4>
 8000962:	bf00      	nop

08000964 <__ledf2>:
 8000964:	f04f 0c01 	mov.w	ip, #1
 8000968:	e002      	b.n	8000970 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__cmpdf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000986:	d01b      	beq.n	80009c0 <__cmpdf2+0x54>
 8000988:	b001      	add	sp, #4
 800098a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800098e:	bf0c      	ite	eq
 8000990:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000994:	ea91 0f03 	teqne	r1, r3
 8000998:	bf02      	ittt	eq
 800099a:	ea90 0f02 	teqeq	r0, r2
 800099e:	2000      	moveq	r0, #0
 80009a0:	4770      	bxeq	lr
 80009a2:	f110 0f00 	cmn.w	r0, #0
 80009a6:	ea91 0f03 	teq	r1, r3
 80009aa:	bf58      	it	pl
 80009ac:	4299      	cmppl	r1, r3
 80009ae:	bf08      	it	eq
 80009b0:	4290      	cmpeq	r0, r2
 80009b2:	bf2c      	ite	cs
 80009b4:	17d8      	asrcs	r0, r3, #31
 80009b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ba:	f040 0001 	orr.w	r0, r0, #1
 80009be:	4770      	bx	lr
 80009c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c8:	d102      	bne.n	80009d0 <__cmpdf2+0x64>
 80009ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ce:	d107      	bne.n	80009e0 <__cmpdf2+0x74>
 80009d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d1d6      	bne.n	8000988 <__cmpdf2+0x1c>
 80009da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009de:	d0d3      	beq.n	8000988 <__cmpdf2+0x1c>
 80009e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop

080009e8 <__aeabi_cdrcmple>:
 80009e8:	4684      	mov	ip, r0
 80009ea:	4610      	mov	r0, r2
 80009ec:	4662      	mov	r2, ip
 80009ee:	468c      	mov	ip, r1
 80009f0:	4619      	mov	r1, r3
 80009f2:	4663      	mov	r3, ip
 80009f4:	e000      	b.n	80009f8 <__aeabi_cdcmpeq>
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdcmpeq>:
 80009f8:	b501      	push	{r0, lr}
 80009fa:	f7ff ffb7 	bl	800096c <__cmpdf2>
 80009fe:	2800      	cmp	r0, #0
 8000a00:	bf48      	it	mi
 8000a02:	f110 0f00 	cmnmi.w	r0, #0
 8000a06:	bd01      	pop	{r0, pc}

08000a08 <__aeabi_dcmpeq>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff fff4 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a10:	bf0c      	ite	eq
 8000a12:	2001      	moveq	r0, #1
 8000a14:	2000      	movne	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_dcmplt>:
 8000a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a20:	f7ff ffea 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a24:	bf34      	ite	cc
 8000a26:	2001      	movcc	r0, #1
 8000a28:	2000      	movcs	r0, #0
 8000a2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2e:	bf00      	nop

08000a30 <__aeabi_dcmple>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff ffe0 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a38:	bf94      	ite	ls
 8000a3a:	2001      	movls	r0, #1
 8000a3c:	2000      	movhi	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmpge>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffce 	bl	80009e8 <__aeabi_cdrcmple>
 8000a4c:	bf94      	ite	ls
 8000a4e:	2001      	movls	r0, #1
 8000a50:	2000      	movhi	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmpgt>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffc4 	bl	80009e8 <__aeabi_cdrcmple>
 8000a60:	bf34      	ite	cc
 8000a62:	2001      	movcc	r0, #1
 8000a64:	2000      	movcs	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_d2iz>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a74:	d215      	bcs.n	8000aa2 <__aeabi_d2iz+0x36>
 8000a76:	d511      	bpl.n	8000a9c <__aeabi_d2iz+0x30>
 8000a78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d912      	bls.n	8000aa8 <__aeabi_d2iz+0x3c>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a92:	fa23 f002 	lsr.w	r0, r3, r2
 8000a96:	bf18      	it	ne
 8000a98:	4240      	negne	r0, r0
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d105      	bne.n	8000ab4 <__aeabi_d2iz+0x48>
 8000aa8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	bf08      	it	eq
 8000aae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ac0:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <SystemInit+0x5c>)
 8000ac2:	4a15      	ldr	r2, [pc, #84]	; (8000b18 <SystemInit+0x5c>)
 8000ac4:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8000ac8:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000acc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000ad0:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <SystemInit+0x60>)
 8000ad2:	4a12      	ldr	r2, [pc, #72]	; (8000b1c <SystemInit+0x60>)
 8000ad4:	6812      	ldr	r2, [r2, #0]
 8000ad6:	f042 0201 	orr.w	r2, r2, #1
 8000ada:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000adc:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <SystemInit+0x60>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000ae2:	4a0e      	ldr	r2, [pc, #56]	; (8000b1c <SystemInit+0x60>)
 8000ae4:	4b0d      	ldr	r3, [pc, #52]	; (8000b1c <SystemInit+0x60>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000aec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000af0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000af2:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <SystemInit+0x60>)
 8000af4:	4a0a      	ldr	r2, [pc, #40]	; (8000b20 <SystemInit+0x64>)
 8000af6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000af8:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <SystemInit+0x60>)
 8000afa:	4a08      	ldr	r2, [pc, #32]	; (8000b1c <SystemInit+0x60>)
 8000afc:	6812      	ldr	r2, [r2, #0]
 8000afe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000b02:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000b04:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <SystemInit+0x60>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000b0a:	f000 f80b 	bl	8000b24 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b0e:	4b02      	ldr	r3, [pc, #8]	; (8000b18 <SystemInit+0x5c>)
 8000b10:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b14:	609a      	str	r2, [r3, #8]
#endif
}
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	e000ed00 	.word	0xe000ed00
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	24003010 	.word	0x24003010

08000b24 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	607b      	str	r3, [r7, #4]
 8000b2e:	2300      	movs	r3, #0
 8000b30:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000b32:	4b35      	ldr	r3, [pc, #212]	; (8000c08 <SetSysClock+0xe4>)
 8000b34:	4a34      	ldr	r2, [pc, #208]	; (8000c08 <SetSysClock+0xe4>)
 8000b36:	6812      	ldr	r2, [r2, #0]
 8000b38:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000b3c:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000b3e:	4b32      	ldr	r3, [pc, #200]	; (8000c08 <SetSysClock+0xe4>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b46:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d103      	bne.n	8000b5c <SetSysClock+0x38>
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000b5a:	d1f0      	bne.n	8000b3e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000b5c:	4b2a      	ldr	r3, [pc, #168]	; (8000c08 <SetSysClock+0xe4>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d002      	beq.n	8000b6e <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	603b      	str	r3, [r7, #0]
 8000b6c:	e001      	b.n	8000b72 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d142      	bne.n	8000bfe <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000b78:	4b23      	ldr	r3, [pc, #140]	; (8000c08 <SetSysClock+0xe4>)
 8000b7a:	4a23      	ldr	r2, [pc, #140]	; (8000c08 <SetSysClock+0xe4>)
 8000b7c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000b7e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000b82:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8000b84:	4b21      	ldr	r3, [pc, #132]	; (8000c0c <SetSysClock+0xe8>)
 8000b86:	4a21      	ldr	r2, [pc, #132]	; (8000c0c <SetSysClock+0xe8>)
 8000b88:	6812      	ldr	r2, [r2, #0]
 8000b8a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000b8e:	601a      	str	r2, [r3, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000b90:	4b1d      	ldr	r3, [pc, #116]	; (8000c08 <SetSysClock+0xe4>)
 8000b92:	4a1d      	ldr	r2, [pc, #116]	; (8000c08 <SetSysClock+0xe4>)
 8000b94:	6892      	ldr	r2, [r2, #8]
 8000b96:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000b98:	4b1b      	ldr	r3, [pc, #108]	; (8000c08 <SetSysClock+0xe4>)
 8000b9a:	4a1b      	ldr	r2, [pc, #108]	; (8000c08 <SetSysClock+0xe4>)
 8000b9c:	6892      	ldr	r2, [r2, #8]
 8000b9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ba2:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000ba4:	4b18      	ldr	r3, [pc, #96]	; (8000c08 <SetSysClock+0xe4>)
 8000ba6:	4a18      	ldr	r2, [pc, #96]	; (8000c08 <SetSysClock+0xe4>)
 8000ba8:	6892      	ldr	r2, [r2, #8]
 8000baa:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8000bae:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000bb0:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <SetSysClock+0xe4>)
 8000bb2:	4a17      	ldr	r2, [pc, #92]	; (8000c10 <SetSysClock+0xec>)
 8000bb4:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000bb6:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <SetSysClock+0xe4>)
 8000bb8:	4a13      	ldr	r2, [pc, #76]	; (8000c08 <SetSysClock+0xe4>)
 8000bba:	6812      	ldr	r2, [r2, #0]
 8000bbc:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000bc0:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000bc2:	bf00      	nop
 8000bc4:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <SetSysClock+0xe4>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d0f9      	beq.n	8000bc4 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000bd0:	4b10      	ldr	r3, [pc, #64]	; (8000c14 <SetSysClock+0xf0>)
 8000bd2:	f240 6205 	movw	r2, #1541	; 0x605
 8000bd6:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000bd8:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <SetSysClock+0xe4>)
 8000bda:	4a0b      	ldr	r2, [pc, #44]	; (8000c08 <SetSysClock+0xe4>)
 8000bdc:	6892      	ldr	r2, [r2, #8]
 8000bde:	f022 0203 	bic.w	r2, r2, #3
 8000be2:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000be4:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <SetSysClock+0xe4>)
 8000be6:	4a08      	ldr	r2, [pc, #32]	; (8000c08 <SetSysClock+0xe4>)
 8000be8:	6892      	ldr	r2, [r2, #8]
 8000bea:	f042 0202 	orr.w	r2, r2, #2
 8000bee:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000bf0:	bf00      	nop
 8000bf2:	4b05      	ldr	r3, [pc, #20]	; (8000c08 <SetSysClock+0xe4>)
 8000bf4:	689b      	ldr	r3, [r3, #8]
 8000bf6:	f003 030c 	and.w	r3, r3, #12
 8000bfa:	2b08      	cmp	r3, #8
 8000bfc:	d1f9      	bne.n	8000bf2 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	40023800 	.word	0x40023800
 8000c0c:	40007000 	.word	0x40007000
 8000c10:	07405408 	.word	0x07405408
 8000c14:	40023c00 	.word	0x40023c00

08000c18 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
}
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8000c28:	e7fe      	b.n	8000c28 <HardFault_Handler+0x4>
 8000c2a:	bf00      	nop

08000c2c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8000c30:	e7fe      	b.n	8000c30 <MemManage_Handler+0x4>
 8000c32:	bf00      	nop

08000c34 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8000c38:	e7fe      	b.n	8000c38 <BusFault_Handler+0x4>
 8000c3a:	bf00      	nop

08000c3c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8000c40:	e7fe      	b.n	8000c40 <UsageFault_Handler+0x4>
 8000c42:	bf00      	nop

08000c44 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
}
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
}
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
}
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c68:	f8df d03c 	ldr.w	sp, [pc, #60]	; 8000ca8 <LoopFillZerobss+0x16>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c6c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c6e:	f000 b804 	b.w	8000c7a <LoopCopyDataInit>

08000c72 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c72:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <LoopFillZerobss+0x1a>)
  ldr  r3, [r3, r1]
 8000c74:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c76:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c78:	3104      	adds	r1, #4

08000c7a <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c7a:	480d      	ldr	r0, [pc, #52]	; (8000cb0 <LoopFillZerobss+0x1e>)
  ldr  r3, =_edata
 8000c7c:	4b0d      	ldr	r3, [pc, #52]	; (8000cb4 <LoopFillZerobss+0x22>)
  adds  r2, r0, r1
 8000c7e:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c80:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c82:	f4ff aff6 	bcc.w	8000c72 <CopyDataInit>
  ldr  r2, =_sbss
 8000c86:	4a0c      	ldr	r2, [pc, #48]	; (8000cb8 <LoopFillZerobss+0x26>)
  b  LoopFillZerobss
 8000c88:	f000 b803 	b.w	8000c92 <LoopFillZerobss>

08000c8c <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c8c:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c8e:	f842 3b04 	str.w	r3, [r2], #4

08000c92 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c92:	4b0a      	ldr	r3, [pc, #40]	; (8000cbc <LoopFillZerobss+0x2a>)
  cmp  r2, r3
 8000c94:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c96:	f4ff aff9 	bcc.w	8000c8c <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c9a:	f7ff ff0f 	bl	8000abc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c9e:	f001 fc01 	bl	80024a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ca2:	f000 f85b 	bl	8000d5c <main>
  bx  lr    
 8000ca6:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ca8:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8000cac:	08002510 	.word	0x08002510
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000cb0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000cb4:	20000128 	.word	0x20000128
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8000cb8:	20000128 	.word	0x20000128
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000cbc:	200001c4 	.word	0x200001c4

08000cc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cc0:	f7ff bffe 	b.w	8000cc0 <ADC_IRQHandler>

08000cc4 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	6039      	str	r1, [r7, #0]
 8000cce:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	da0b      	bge.n	8000cf0 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000cd8:	490d      	ldr	r1, [pc, #52]	; (8000d10 <NVIC_SetPriority+0x4c>)
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	f003 030f 	and.w	r3, r3, #15
 8000ce0:	3b04      	subs	r3, #4
 8000ce2:	683a      	ldr	r2, [r7, #0]
 8000ce4:	b2d2      	uxtb	r2, r2
 8000ce6:	0112      	lsls	r2, r2, #4
 8000ce8:	b2d2      	uxtb	r2, r2
 8000cea:	440b      	add	r3, r1
 8000cec:	761a      	strb	r2, [r3, #24]
 8000cee:	e009      	b.n	8000d04 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000cf0:	4908      	ldr	r1, [pc, #32]	; (8000d14 <NVIC_SetPriority+0x50>)
 8000cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf6:	683a      	ldr	r2, [r7, #0]
 8000cf8:	b2d2      	uxtb	r2, r2
 8000cfa:	0112      	lsls	r2, r2, #4
 8000cfc:	b2d2      	uxtb	r2, r2
 8000cfe:	440b      	add	r3, r1
 8000d00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	e000ed00 	.word	0xe000ed00
 8000d14:	e000e100 	.word	0xe000e100

08000d18 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d26:	d301      	bcc.n	8000d2c <SysTick_Config+0x14>
 8000d28:	2301      	movs	r3, #1
 8000d2a:	e011      	b.n	8000d50 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000d2c:	4b0a      	ldr	r3, [pc, #40]	; (8000d58 <SysTick_Config+0x40>)
 8000d2e:	687a      	ldr	r2, [r7, #4]
 8000d30:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8000d34:	3a01      	subs	r2, #1
 8000d36:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 8000d38:	f04f 30ff 	mov.w	r0, #4294967295
 8000d3c:	210f      	movs	r1, #15
 8000d3e:	f7ff ffc1 	bl	8000cc4 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000d42:	4b05      	ldr	r3, [pc, #20]	; (8000d58 <SysTick_Config+0x40>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
 8000d48:	4b03      	ldr	r3, [pc, #12]	; (8000d58 <SysTick_Config+0x40>)
 8000d4a:	2207      	movs	r2, #7
 8000d4c:	601a      	str	r2, [r3, #0]
  return (0);                                                  /* Function successful */
 8000d4e:	2300      	movs	r3, #0
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	e000e010 	.word	0xe000e010

08000d5c <main>:
extern "C" {
void SysTick_Handler(void);
}
uint32_t position;
int main(void)
{
 8000d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d5e:	b0ab      	sub	sp, #172	; 0xac
 8000d60:	af06      	add	r7, sp, #24
  int16_t i = -1000;
 8000d62:	f64f 4318 	movw	r3, #64536	; 0xfc18
 8000d66:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  SysTick_Config(SystemCoreClock / 1000);
 8000d6a:	4b41      	ldr	r3, [pc, #260]	; (8000e70 <main+0x114>)
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	4b41      	ldr	r3, [pc, #260]	; (8000e74 <main+0x118>)
 8000d70:	fba3 1302 	umull	r1, r3, r3, r2
 8000d74:	099b      	lsrs	r3, r3, #6
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff ffce 	bl	8000d18 <SysTick_Config>
  Pwm M2_A_H(MAH_Port[2], MAH_Pin[2], MAH_Tim[2], MAH_Af_Pin[2], MAH_Af[2], MAH_Ch[2]);
 8000d7c:	4b3e      	ldr	r3, [pc, #248]	; (8000e78 <main+0x11c>)
 8000d7e:	6899      	ldr	r1, [r3, #8]
 8000d80:	4b3e      	ldr	r3, [pc, #248]	; (8000e7c <main+0x120>)
 8000d82:	689a      	ldr	r2, [r3, #8]
 8000d84:	4b3e      	ldr	r3, [pc, #248]	; (8000e80 <main+0x124>)
 8000d86:	689b      	ldr	r3, [r3, #8]
 8000d88:	483e      	ldr	r0, [pc, #248]	; (8000e84 <main+0x128>)
 8000d8a:	7886      	ldrb	r6, [r0, #2]
 8000d8c:	483e      	ldr	r0, [pc, #248]	; (8000e88 <main+0x12c>)
 8000d8e:	7885      	ldrb	r5, [r0, #2]
 8000d90:	483e      	ldr	r0, [pc, #248]	; (8000e8c <main+0x130>)
 8000d92:	7884      	ldrb	r4, [r0, #2]
 8000d94:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8000d98:	9600      	str	r6, [sp, #0]
 8000d9a:	9501      	str	r5, [sp, #4]
 8000d9c:	9402      	str	r4, [sp, #8]
 8000d9e:	f000 ffd3 	bl	8001d48 <_ZN3PwmC1EP12GPIO_TypeDefmP11TIM_TypeDefhhh>
  GPIO M2_A_L(MAL_Port[2], MAL_Pin[2]);
 8000da2:	4b3b      	ldr	r3, [pc, #236]	; (8000e90 <main+0x134>)
 8000da4:	689a      	ldr	r2, [r3, #8]
 8000da6:	4b3b      	ldr	r3, [pc, #236]	; (8000e94 <main+0x138>)
 8000da8:	689b      	ldr	r3, [r3, #8]
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8000db0:	4608      	mov	r0, r1
 8000db2:	4611      	mov	r1, r2
 8000db4:	461a      	mov	r2, r3
 8000db6:	f001 fa2b 	bl	8002210 <_ZN4GPIOC1EP12GPIO_TypeDeft>
  Pwm M2_B_H(MBH_Port[2], MBH_Pin[2], MBH_Tim[2], MBH_Af_Pin[2], MBH_Af[2], MBH_Ch[2]);
 8000dba:	4b37      	ldr	r3, [pc, #220]	; (8000e98 <main+0x13c>)
 8000dbc:	6899      	ldr	r1, [r3, #8]
 8000dbe:	4b37      	ldr	r3, [pc, #220]	; (8000e9c <main+0x140>)
 8000dc0:	689a      	ldr	r2, [r3, #8]
 8000dc2:	4b37      	ldr	r3, [pc, #220]	; (8000ea0 <main+0x144>)
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	4837      	ldr	r0, [pc, #220]	; (8000ea4 <main+0x148>)
 8000dc8:	7886      	ldrb	r6, [r0, #2]
 8000dca:	4837      	ldr	r0, [pc, #220]	; (8000ea8 <main+0x14c>)
 8000dcc:	7885      	ldrb	r5, [r0, #2]
 8000dce:	4837      	ldr	r0, [pc, #220]	; (8000eac <main+0x150>)
 8000dd0:	7884      	ldrb	r4, [r0, #2]
 8000dd2:	f107 0074 	add.w	r0, r7, #116	; 0x74
 8000dd6:	9600      	str	r6, [sp, #0]
 8000dd8:	9501      	str	r5, [sp, #4]
 8000dda:	9402      	str	r4, [sp, #8]
 8000ddc:	f000 ffb4 	bl	8001d48 <_ZN3PwmC1EP12GPIO_TypeDefmP11TIM_TypeDefhhh>
  GPIO M2_B_L(MBL_Port[2], MBL_Pin[2]);
 8000de0:	4b33      	ldr	r3, [pc, #204]	; (8000eb0 <main+0x154>)
 8000de2:	689a      	ldr	r2, [r3, #8]
 8000de4:	4b33      	ldr	r3, [pc, #204]	; (8000eb4 <main+0x158>)
 8000de6:	689b      	ldr	r3, [r3, #8]
 8000de8:	b29b      	uxth	r3, r3
 8000dea:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8000dee:	4608      	mov	r0, r1
 8000df0:	4611      	mov	r1, r2
 8000df2:	461a      	mov	r2, r3
 8000df4:	f001 fa0c 	bl	8002210 <_ZN4GPIOC1EP12GPIO_TypeDeft>
  Encoder M2_Enc(M_EncA_Port[2], M_EncB_Port[2], M_EncA_Pin[2], M_EncB_Pin[2], M_Enc_Tim[2], M_EncA_Af_Pin[2], M_EncB_Af_Pin[2], M_Enc_Af[2]);
 8000df8:	4b2f      	ldr	r3, [pc, #188]	; (8000eb8 <main+0x15c>)
 8000dfa:	6899      	ldr	r1, [r3, #8]
 8000dfc:	4b2f      	ldr	r3, [pc, #188]	; (8000ebc <main+0x160>)
 8000dfe:	689a      	ldr	r2, [r3, #8]
 8000e00:	4b2f      	ldr	r3, [pc, #188]	; (8000ec0 <main+0x164>)
 8000e02:	689b      	ldr	r3, [r3, #8]
 8000e04:	482f      	ldr	r0, [pc, #188]	; (8000ec4 <main+0x168>)
 8000e06:	f8d0 c008 	ldr.w	ip, [r0, #8]
 8000e0a:	482f      	ldr	r0, [pc, #188]	; (8000ec8 <main+0x16c>)
 8000e0c:	f8d0 e008 	ldr.w	lr, [r0, #8]
 8000e10:	482e      	ldr	r0, [pc, #184]	; (8000ecc <main+0x170>)
 8000e12:	7886      	ldrb	r6, [r0, #2]
 8000e14:	482e      	ldr	r0, [pc, #184]	; (8000ed0 <main+0x174>)
 8000e16:	7885      	ldrb	r5, [r0, #2]
 8000e18:	482e      	ldr	r0, [pc, #184]	; (8000ed4 <main+0x178>)
 8000e1a:	7884      	ldrb	r4, [r0, #2]
 8000e1c:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8000e20:	f8cd c000 	str.w	ip, [sp]
 8000e24:	f8cd e004 	str.w	lr, [sp, #4]
 8000e28:	9602      	str	r6, [sp, #8]
 8000e2a:	9503      	str	r5, [sp, #12]
 8000e2c:	9404      	str	r4, [sp, #16]
 8000e2e:	f001 fa69 	bl	8002304 <_ZN7EncoderC1EP12GPIO_TypeDefS1_mmP11TIM_TypeDefhhh>
  Motor M2(&M2_A_H, &M2_A_L, &M2_B_H, &M2_B_L, &M2_Enc);
 8000e32:	1d38      	adds	r0, r7, #4
 8000e34:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8000e38:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8000e3c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000e40:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 8000e44:	9400      	str	r4, [sp, #0]
 8000e46:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8000e4a:	9401      	str	r4, [sp, #4]
 8000e4c:	f001 f89a 	bl	8001f84 <_ZN5MotorC1EP3PwmP4GPIOS1_S3_P7Encoder>
  Delay(100);
 8000e50:	2064      	movs	r0, #100	; 0x64
 8000e52:	f000 f843 	bl	8000edc <_Z5Delaym>
  //M2.Answer((int16_t)600);
  //M2_B_H.set_DutyCycle(600);
  //M2_A_L.Set();
  //M2_A_H.set_DutyCycle(0);
  //M2_B_L.Reset();
  M2.Answer(-400);
 8000e56:	1d3b      	adds	r3, r7, #4
 8000e58:	4618      	mov	r0, r3
 8000e5a:	491f      	ldr	r1, [pc, #124]	; (8000ed8 <main+0x17c>)
 8000e5c:	f001 f8cc 	bl	8001ff8 <_ZN5Motor6AnswerEs>
  while (1)
  {
	  M2.Control_Pos(2000);
 8000e60:	1d3b      	adds	r3, r7, #4
 8000e62:	4618      	mov	r0, r3
 8000e64:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000e68:	f001 f8aa 	bl	8001fc0 <_ZN5Motor11Control_PosEm>
	  //Delay(10);
	  //i = i+10;
  }
 8000e6c:	e7f8      	b.n	8000e60 <main+0x104>
 8000e6e:	bf00      	nop
 8000e70:	20000000 	.word	0x20000000
 8000e74:	10624dd3 	.word	0x10624dd3
 8000e78:	20000004 	.word	0x20000004
 8000e7c:	20000044 	.word	0x20000044
 8000e80:	20000084 	.word	0x20000084
 8000e84:	200000b4 	.word	0x200000b4
 8000e88:	200000ac 	.word	0x200000ac
 8000e8c:	200000a4 	.word	0x200000a4
 8000e90:	20000014 	.word	0x20000014
 8000e94:	20000054 	.word	0x20000054
 8000e98:	20000024 	.word	0x20000024
 8000e9c:	20000064 	.word	0x20000064
 8000ea0:	20000094 	.word	0x20000094
 8000ea4:	200000b8 	.word	0x200000b8
 8000ea8:	200000b0 	.word	0x200000b0
 8000eac:	200000a8 	.word	0x200000a8
 8000eb0:	20000034 	.word	0x20000034
 8000eb4:	20000074 	.word	0x20000074
 8000eb8:	200000bc 	.word	0x200000bc
 8000ebc:	200000cc 	.word	0x200000cc
 8000ec0:	200000dc 	.word	0x200000dc
 8000ec4:	200000ec 	.word	0x200000ec
 8000ec8:	200000fc 	.word	0x200000fc
 8000ecc:	20000110 	.word	0x20000110
 8000ed0:	20000114 	.word	0x20000114
 8000ed4:	2000010c 	.word	0x2000010c
 8000ed8:	fffffe70 	.word	0xfffffe70

08000edc <_Z5Delaym>:
}


void Delay( uint32_t nTime)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  TimingDelay = nTime;
 8000ee4:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <_Z5Delaym+0x24>)
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	601a      	str	r2, [r3, #0]

  while(TimingDelay != 0); //gustavo
 8000eea:	bf00      	nop
 8000eec:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <_Z5Delaym+0x24>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d1fb      	bne.n	8000eec <_Z5Delaym+0x10>
}
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	20000144 	.word	0x20000144

08000f04 <_Z21TimingDelay_Decrementv>:

void TimingDelay_Decrement(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  if (TimingDelay != 0x00)
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <_Z21TimingDelay_Decrementv+0x20>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d004      	beq.n	8000f1a <_Z21TimingDelay_Decrementv+0x16>
  {
    TimingDelay--;
 8000f10:	4b04      	ldr	r3, [pc, #16]	; (8000f24 <_Z21TimingDelay_Decrementv+0x20>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	1e5a      	subs	r2, r3, #1
 8000f16:	4b03      	ldr	r3, [pc, #12]	; (8000f24 <_Z21TimingDelay_Decrementv+0x20>)
 8000f18:	601a      	str	r2, [r3, #0]
  }
}
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	20000144 	.word	0x20000144

08000f28 <SysTick_Handler>:
extern "C" {
void SysTick_Handler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  TimingDelay_Decrement();
 8000f2c:	f7ff ffea 	bl	8000f04 <_Z21TimingDelay_Decrementv>
}
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop

08000f34 <EVAL_AUDIO_TransferComplete_CallBack>:

/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
extern "C" void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 8000f3e:	bf00      	nop
}
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <EVAL_AUDIO_GetSampleCallBack>:

/*
 * Callback used by stm324xg_eval_audio_codec.c.
 * Refer to stm324xg_eval_audio_codec.h for more info.
 */
extern "C" uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return -1;
 8000f50:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop

08000f60 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8000f64:	4b37      	ldr	r3, [pc, #220]	; (8001044 <Audio_MAL_IRQHandler+0xe4>)
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	4b37      	ldr	r3, [pc, #220]	; (8001048 <Audio_MAL_IRQHandler+0xe8>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4610      	mov	r0, r2
 8000f6e:	4619      	mov	r1, r3
 8000f70:	f000 fe66 	bl	8001c40 <DMA_GetFlagStatus>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d062      	beq.n	8001040 <Audio_MAL_IRQHandler+0xe0>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 8000f7a:	4b34      	ldr	r3, [pc, #208]	; (800104c <Audio_MAL_IRQHandler+0xec>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d04a      	beq.n	8001018 <Audio_MAL_IRQHandler+0xb8>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 8000f82:	bf00      	nop
 8000f84:	4b2f      	ldr	r3, [pc, #188]	; (8001044 <Audio_MAL_IRQHandler+0xe4>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f000 fe41 	bl	8001c10 <DMA_GetCmdStatus>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d1f7      	bne.n	8000f84 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 8000f94:	4b2b      	ldr	r3, [pc, #172]	; (8001044 <Audio_MAL_IRQHandler+0xe4>)
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	4b2b      	ldr	r3, [pc, #172]	; (8001048 <Audio_MAL_IRQHandler+0xe8>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4610      	mov	r0, r2
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	f000 fe8a 	bl	8001cb8 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 8000fa4:	4b2a      	ldr	r3, [pc, #168]	; (8001050 <Audio_MAL_IRQHandler+0xf0>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4b2a      	ldr	r3, [pc, #168]	; (8001054 <Audio_MAL_IRQHandler+0xf4>)
 8000fac:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 8000fae:	4b27      	ldr	r3, [pc, #156]	; (800104c <Audio_MAL_IRQHandler+0xec>)
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	bf28      	it	cs
 8000fba:	461a      	movcs	r2, r3
 8000fbc:	4b25      	ldr	r3, [pc, #148]	; (8001054 <Audio_MAL_IRQHandler+0xf4>)
 8000fbe:	611a      	str	r2, [r3, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8000fc0:	4b20      	ldr	r3, [pc, #128]	; (8001044 <Audio_MAL_IRQHandler+0xe4>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	4923      	ldr	r1, [pc, #140]	; (8001054 <Audio_MAL_IRQHandler+0xf4>)
 8000fc8:	f000 fdb0 	bl	8001b2c <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 8000fcc:	4b1d      	ldr	r3, [pc, #116]	; (8001044 <Audio_MAL_IRQHandler+0xe4>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	f000 fe00 	bl	8001bd8 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 8000fd8:	4b1d      	ldr	r3, [pc, #116]	; (8001050 <Audio_MAL_IRQHandler+0xf0>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	4b1b      	ldr	r3, [pc, #108]	; (800104c <Audio_MAL_IRQHandler+0xec>)
 8000fde:	6819      	ldr	r1, [r3, #0]
 8000fe0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fe4:	4299      	cmp	r1, r3
 8000fe6:	bf38      	it	cc
 8000fe8:	460b      	movcc	r3, r1
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	441a      	add	r2, r3
 8000fee:	4b18      	ldr	r3, [pc, #96]	; (8001050 <Audio_MAL_IRQHandler+0xf0>)
 8000ff0:	601a      	str	r2, [r3, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 8000ff2:	4b16      	ldr	r3, [pc, #88]	; (800104c <Audio_MAL_IRQHandler+0xec>)
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	4b15      	ldr	r3, [pc, #84]	; (800104c <Audio_MAL_IRQHandler+0xec>)
 8000ff8:	6819      	ldr	r1, [r3, #0]
 8000ffa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ffe:	4299      	cmp	r1, r3
 8001000:	bf38      	it	cc
 8001002:	460b      	movcc	r3, r1
 8001004:	1ad2      	subs	r2, r2, r3
 8001006:	4b11      	ldr	r3, [pc, #68]	; (800104c <Audio_MAL_IRQHandler+0xec>)
 8001008:	601a      	str	r2, [r3, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 800100a:	4b0e      	ldr	r3, [pc, #56]	; (8001044 <Audio_MAL_IRQHandler+0xe4>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4618      	mov	r0, r3
 8001010:	2101      	movs	r1, #1
 8001012:	f000 fde1 	bl	8001bd8 <DMA_Cmd>
 8001016:	e013      	b.n	8001040 <Audio_MAL_IRQHandler+0xe0>
    }
    else
    {
      /* Disable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 8001018:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <Audio_MAL_IRQHandler+0xe4>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4618      	mov	r0, r3
 800101e:	2100      	movs	r1, #0
 8001020:	f000 fdda 	bl	8001bd8 <DMA_Cmd>
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 8001024:	4b07      	ldr	r3, [pc, #28]	; (8001044 <Audio_MAL_IRQHandler+0xe4>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	4b07      	ldr	r3, [pc, #28]	; (8001048 <Audio_MAL_IRQHandler+0xe8>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4610      	mov	r0, r2
 800102e:	4619      	mov	r1, r3
 8001030:	f000 fe42 	bl	8001cb8 <DMA_ClearFlag>
      
      /* Manage the remaining file size and new address offset: This function 
      should be coded by user (its prototype is already declared in stm32f4_discovery_audio_codec.h) */  
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 8001034:	4b06      	ldr	r3, [pc, #24]	; (8001050 <Audio_MAL_IRQHandler+0xf0>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4618      	mov	r0, r3
 800103a:	2100      	movs	r1, #0
 800103c:	f7ff ff7a 	bl	8000f34 <EVAL_AUDIO_TransferComplete_CallBack>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20000120 	.word	0x20000120
 8001048:	20000124 	.word	0x20000124
 800104c:	20000118 	.word	0x20000118
 8001050:	20000148 	.word	0x20000148
 8001054:	20000188 	.word	0x20000188

08001058 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 800105c:	f7ff ff80 	bl	8000f60 <Audio_MAL_IRQHandler>
}
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop

08001064 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8001068:	f7ff ff7a 	bl	8000f60 <Audio_MAL_IRQHandler>
}
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop

08001070 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8001074:	480c      	ldr	r0, [pc, #48]	; (80010a8 <SPI3_IRQHandler+0x38>)
 8001076:	2102      	movs	r1, #2
 8001078:	f000 fbf2 	bl	8001860 <SPI_I2S_GetFlagStatus>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d011      	beq.n	80010a6 <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8001082:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <SPI3_IRQHandler+0x3c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	2b02      	cmp	r3, #2
 8001088:	d106      	bne.n	8001098 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 800108a:	f7ff ff5f 	bl	8000f4c <EVAL_AUDIO_GetSampleCallBack>
 800108e:	4603      	mov	r3, r0
 8001090:	2004      	movs	r0, #4
 8001092:	4619      	mov	r1, r3
 8001094:	f000 fe3e 	bl	8001d14 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 8001098:	f7ff ff58 	bl	8000f4c <EVAL_AUDIO_GetSampleCallBack>
 800109c:	4603      	mov	r3, r0
 800109e:	4802      	ldr	r0, [pc, #8]	; (80010a8 <SPI3_IRQHandler+0x38>)
 80010a0:	4619      	mov	r1, r3
 80010a2:	f000 fbcf 	bl	8001844 <SPI_I2S_SendData>
  }
}
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40003c00 	.word	0x40003c00
 80010ac:	2000011c 	.word	0x2000011c

080010b0 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	881b      	ldrh	r3, [r3, #0]
 80010c2:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	4b28      	ldr	r3, [pc, #160]	; (8001168 <TIM_TimeBaseInit+0xb8>)
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d013      	beq.n	80010f4 <TIM_TimeBaseInit+0x44>
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	4b27      	ldr	r3, [pc, #156]	; (800116c <TIM_TimeBaseInit+0xbc>)
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d00f      	beq.n	80010f4 <TIM_TimeBaseInit+0x44>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010da:	d00b      	beq.n	80010f4 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	4b24      	ldr	r3, [pc, #144]	; (8001170 <TIM_TimeBaseInit+0xc0>)
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d007      	beq.n	80010f4 <TIM_TimeBaseInit+0x44>
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	4b23      	ldr	r3, [pc, #140]	; (8001174 <TIM_TimeBaseInit+0xc4>)
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d003      	beq.n	80010f4 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80010ec:	687a      	ldr	r2, [r7, #4]
 80010ee:	4b22      	ldr	r3, [pc, #136]	; (8001178 <TIM_TimeBaseInit+0xc8>)
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d108      	bne.n	8001106 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 80010f4:	89fb      	ldrh	r3, [r7, #14]
 80010f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80010fa:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	885a      	ldrh	r2, [r3, #2]
 8001100:	89fb      	ldrh	r3, [r7, #14]
 8001102:	4313      	orrs	r3, r2
 8001104:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	4b1c      	ldr	r3, [pc, #112]	; (800117c <TIM_TimeBaseInit+0xcc>)
 800110a:	429a      	cmp	r2, r3
 800110c:	d00c      	beq.n	8001128 <TIM_TimeBaseInit+0x78>
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	4b1b      	ldr	r3, [pc, #108]	; (8001180 <TIM_TimeBaseInit+0xd0>)
 8001112:	429a      	cmp	r2, r3
 8001114:	d008      	beq.n	8001128 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8001116:	89fb      	ldrh	r3, [r7, #14]
 8001118:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800111c:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	891a      	ldrh	r2, [r3, #8]
 8001122:	89fb      	ldrh	r3, [r7, #14]
 8001124:	4313      	orrs	r3, r2
 8001126:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	89fa      	ldrh	r2, [r7, #14]
 800112c:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685a      	ldr	r2, [r3, #4]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	881a      	ldrh	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	4b09      	ldr	r3, [pc, #36]	; (8001168 <TIM_TimeBaseInit+0xb8>)
 8001142:	429a      	cmp	r2, r3
 8001144:	d003      	beq.n	800114e <TIM_TimeBaseInit+0x9e>
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	4b08      	ldr	r3, [pc, #32]	; (800116c <TIM_TimeBaseInit+0xbc>)
 800114a:	429a      	cmp	r2, r3
 800114c:	d104      	bne.n	8001158 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	7a9b      	ldrb	r3, [r3, #10]
 8001152:	461a      	mov	r2, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2201      	movs	r2, #1
 800115c:	829a      	strh	r2, [r3, #20]
}
 800115e:	3714      	adds	r7, #20
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	40010000 	.word	0x40010000
 800116c:	40010400 	.word	0x40010400
 8001170:	40000400 	.word	0x40000400
 8001174:	40000800 	.word	0x40000800
 8001178:	40000c00 	.word	0x40000c00
 800117c:	40001000 	.word	0x40001000
 8001180:	40001400 	.word	0x40001400

08001184 <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	683a      	ldr	r2, [r7, #0]
 8001192:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop

080011a0 <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Counter Register value
  */
uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	460b      	mov	r3, r1
 80011c2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80011c4:	78fb      	ldrb	r3, [r7, #3]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d008      	beq.n	80011dc <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	881b      	ldrh	r3, [r3, #0]
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	801a      	strh	r2, [r3, #0]
 80011da:	e007      	b.n	80011ec <TIM_ARRPreloadConfig+0x34>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	881b      	ldrh	r3, [r3, #0]
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80011e6:	b29a      	uxth	r2, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	801a      	strh	r2, [r3, #0]
  }
}
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop

080011f8 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	460b      	mov	r3, r1
 8001202:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001204:	78fb      	ldrb	r3, [r7, #3]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d008      	beq.n	800121c <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	881b      	ldrh	r3, [r3, #0]
 800120e:	b29b      	uxth	r3, r3
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	b29a      	uxth	r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	801a      	strh	r2, [r3, #0]
 800121a:	e007      	b.n	800122c <TIM_Cmd+0x34>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	881b      	ldrh	r3, [r3, #0]
 8001220:	b29b      	uxth	r3, r3
 8001222:	f023 0301 	bic.w	r3, r3, #1
 8001226:	b29a      	uxth	r2, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	801a      	strh	r2, [r3, #0]
  }
}
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop

08001238 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8001242:	2300      	movs	r3, #0
 8001244:	817b      	strh	r3, [r7, #10]
 8001246:	2300      	movs	r3, #0
 8001248:	81fb      	strh	r3, [r7, #14]
 800124a:	2300      	movs	r3, #0
 800124c:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	8c1b      	ldrh	r3, [r3, #32]
 8001252:	b29b      	uxth	r3, r3
 8001254:	f023 0301 	bic.w	r3, r3, #1
 8001258:	b29a      	uxth	r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	8c1b      	ldrh	r3, [r3, #32]
 8001262:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	889b      	ldrh	r3, [r3, #4]
 8001268:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	8b1b      	ldrh	r3, [r3, #24]
 800126e:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
 8001270:	897b      	ldrh	r3, [r7, #10]
 8001272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001276:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 8001278:	897b      	ldrh	r3, [r7, #10]
 800127a:	f023 0303 	bic.w	r3, r3, #3
 800127e:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	881a      	ldrh	r2, [r3, #0]
 8001284:	897b      	ldrh	r3, [r7, #10]
 8001286:	4313      	orrs	r3, r2
 8001288:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 800128a:	89fb      	ldrh	r3, [r7, #14]
 800128c:	f023 0302 	bic.w	r3, r3, #2
 8001290:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	899a      	ldrh	r2, [r3, #12]
 8001296:	89fb      	ldrh	r3, [r7, #14]
 8001298:	4313      	orrs	r3, r2
 800129a:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	885a      	ldrh	r2, [r3, #2]
 80012a0:	89fb      	ldrh	r3, [r7, #14]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	4b1e      	ldr	r3, [pc, #120]	; (8001324 <TIM_OC1Init+0xec>)
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d003      	beq.n	80012b6 <TIM_OC1Init+0x7e>
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	4b1d      	ldr	r3, [pc, #116]	; (8001328 <TIM_OC1Init+0xf0>)
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d123      	bne.n	80012fe <TIM_OC1Init+0xc6>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 80012b6:	89fb      	ldrh	r3, [r7, #14]
 80012b8:	f023 0308 	bic.w	r3, r3, #8
 80012bc:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	89da      	ldrh	r2, [r3, #14]
 80012c2:	89fb      	ldrh	r3, [r7, #14]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 80012c8:	89fb      	ldrh	r3, [r7, #14]
 80012ca:	f023 0304 	bic.w	r3, r3, #4
 80012ce:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	889a      	ldrh	r2, [r3, #4]
 80012d4:	89fb      	ldrh	r3, [r7, #14]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
 80012da:	89bb      	ldrh	r3, [r7, #12]
 80012dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012e0:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 80012e2:	89bb      	ldrh	r3, [r7, #12]
 80012e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80012e8:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	8a1a      	ldrh	r2, [r3, #16]
 80012ee:	89bb      	ldrh	r3, [r7, #12]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	8a5a      	ldrh	r2, [r3, #18]
 80012f8:	89bb      	ldrh	r3, [r7, #12]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	89ba      	ldrh	r2, [r7, #12]
 8001302:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	897a      	ldrh	r2, [r7, #10]
 8001308:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	689a      	ldr	r2, [r3, #8]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	89fa      	ldrh	r2, [r7, #14]
 8001316:	841a      	strh	r2, [r3, #32]
}
 8001318:	3714      	adds	r7, #20
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	40010000 	.word	0x40010000
 8001328:	40010400 	.word	0x40010400

0800132c <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8001336:	2300      	movs	r3, #0
 8001338:	817b      	strh	r3, [r7, #10]
 800133a:	2300      	movs	r3, #0
 800133c:	81fb      	strh	r3, [r7, #14]
 800133e:	2300      	movs	r3, #0
 8001340:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	8c1b      	ldrh	r3, [r3, #32]
 8001346:	b29b      	uxth	r3, r3
 8001348:	f023 0310 	bic.w	r3, r3, #16
 800134c:	b29a      	uxth	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	8c1b      	ldrh	r3, [r3, #32]
 8001356:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	889b      	ldrh	r3, [r3, #4]
 800135c:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	8b1b      	ldrh	r3, [r3, #24]
 8001362:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
 8001364:	897b      	ldrh	r3, [r7, #10]
 8001366:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800136a:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 800136c:	897b      	ldrh	r3, [r7, #10]
 800136e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001372:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	881b      	ldrh	r3, [r3, #0]
 8001378:	021b      	lsls	r3, r3, #8
 800137a:	b29a      	uxth	r2, r3
 800137c:	897b      	ldrh	r3, [r7, #10]
 800137e:	4313      	orrs	r3, r2
 8001380:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 8001382:	89fb      	ldrh	r3, [r7, #14]
 8001384:	f023 0320 	bic.w	r3, r3, #32
 8001388:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	899b      	ldrh	r3, [r3, #12]
 800138e:	011b      	lsls	r3, r3, #4
 8001390:	b29a      	uxth	r2, r3
 8001392:	89fb      	ldrh	r3, [r7, #14]
 8001394:	4313      	orrs	r3, r2
 8001396:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	885b      	ldrh	r3, [r3, #2]
 800139c:	011b      	lsls	r3, r3, #4
 800139e:	b29a      	uxth	r2, r3
 80013a0:	89fb      	ldrh	r3, [r7, #14]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	4b22      	ldr	r3, [pc, #136]	; (8001434 <TIM_OC2Init+0x108>)
 80013aa:	429a      	cmp	r2, r3
 80013ac:	d003      	beq.n	80013b6 <TIM_OC2Init+0x8a>
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	4b21      	ldr	r3, [pc, #132]	; (8001438 <TIM_OC2Init+0x10c>)
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d12b      	bne.n	800140e <TIM_OC2Init+0xe2>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 80013b6:	89fb      	ldrh	r3, [r7, #14]
 80013b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80013bc:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	89db      	ldrh	r3, [r3, #14]
 80013c2:	011b      	lsls	r3, r3, #4
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	89fb      	ldrh	r3, [r7, #14]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 80013cc:	89fb      	ldrh	r3, [r7, #14]
 80013ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80013d2:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	889b      	ldrh	r3, [r3, #4]
 80013d8:	011b      	lsls	r3, r3, #4
 80013da:	b29a      	uxth	r2, r3
 80013dc:	89fb      	ldrh	r3, [r7, #14]
 80013de:	4313      	orrs	r3, r2
 80013e0:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
 80013e2:	89bb      	ldrh	r3, [r7, #12]
 80013e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80013e8:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 80013ea:	89bb      	ldrh	r3, [r7, #12]
 80013ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80013f0:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	8a1b      	ldrh	r3, [r3, #16]
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	b29a      	uxth	r2, r3
 80013fa:	89bb      	ldrh	r3, [r7, #12]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	8a5b      	ldrh	r3, [r3, #18]
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	b29a      	uxth	r2, r3
 8001408:	89bb      	ldrh	r3, [r7, #12]
 800140a:	4313      	orrs	r3, r2
 800140c:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	89ba      	ldrh	r2, [r7, #12]
 8001412:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	897a      	ldrh	r2, [r7, #10]
 8001418:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	689a      	ldr	r2, [r3, #8]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	89fa      	ldrh	r2, [r7, #14]
 8001426:	841a      	strh	r2, [r3, #32]
}
 8001428:	3714      	adds	r7, #20
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	40010000 	.word	0x40010000
 8001438:	40010400 	.word	0x40010400

0800143c <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800143c:	b480      	push	{r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8001446:	2300      	movs	r3, #0
 8001448:	817b      	strh	r3, [r7, #10]
 800144a:	2300      	movs	r3, #0
 800144c:	81fb      	strh	r3, [r7, #14]
 800144e:	2300      	movs	r3, #0
 8001450:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	8c1b      	ldrh	r3, [r3, #32]
 8001456:	b29b      	uxth	r3, r3
 8001458:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800145c:	b29a      	uxth	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	8c1b      	ldrh	r3, [r3, #32]
 8001466:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	889b      	ldrh	r3, [r3, #4]
 800146c:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	8b9b      	ldrh	r3, [r3, #28]
 8001472:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 8001474:	897b      	ldrh	r3, [r7, #10]
 8001476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800147a:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 800147c:	897b      	ldrh	r3, [r7, #10]
 800147e:	f023 0303 	bic.w	r3, r3, #3
 8001482:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	881a      	ldrh	r2, [r3, #0]
 8001488:	897b      	ldrh	r3, [r7, #10]
 800148a:	4313      	orrs	r3, r2
 800148c:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 800148e:	89fb      	ldrh	r3, [r7, #14]
 8001490:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001494:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	899b      	ldrh	r3, [r3, #12]
 800149a:	021b      	lsls	r3, r3, #8
 800149c:	b29a      	uxth	r2, r3
 800149e:	89fb      	ldrh	r3, [r7, #14]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	885b      	ldrh	r3, [r3, #2]
 80014a8:	021b      	lsls	r3, r3, #8
 80014aa:	b29a      	uxth	r2, r3
 80014ac:	89fb      	ldrh	r3, [r7, #14]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	4b22      	ldr	r3, [pc, #136]	; (8001540 <TIM_OC3Init+0x104>)
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d003      	beq.n	80014c2 <TIM_OC3Init+0x86>
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	4b21      	ldr	r3, [pc, #132]	; (8001544 <TIM_OC3Init+0x108>)
 80014be:	429a      	cmp	r2, r3
 80014c0:	d12b      	bne.n	800151a <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 80014c2:	89fb      	ldrh	r3, [r7, #14]
 80014c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80014c8:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	89db      	ldrh	r3, [r3, #14]
 80014ce:	021b      	lsls	r3, r3, #8
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	89fb      	ldrh	r3, [r7, #14]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 80014d8:	89fb      	ldrh	r3, [r7, #14]
 80014da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80014de:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	889b      	ldrh	r3, [r3, #4]
 80014e4:	021b      	lsls	r3, r3, #8
 80014e6:	b29a      	uxth	r2, r3
 80014e8:	89fb      	ldrh	r3, [r7, #14]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
 80014ee:	89bb      	ldrh	r3, [r7, #12]
 80014f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80014f4:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 80014f6:	89bb      	ldrh	r3, [r7, #12]
 80014f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80014fc:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	8a1b      	ldrh	r3, [r3, #16]
 8001502:	011b      	lsls	r3, r3, #4
 8001504:	b29a      	uxth	r2, r3
 8001506:	89bb      	ldrh	r3, [r7, #12]
 8001508:	4313      	orrs	r3, r2
 800150a:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	8a5b      	ldrh	r3, [r3, #18]
 8001510:	011b      	lsls	r3, r3, #4
 8001512:	b29a      	uxth	r2, r3
 8001514:	89bb      	ldrh	r3, [r7, #12]
 8001516:	4313      	orrs	r3, r2
 8001518:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	89ba      	ldrh	r2, [r7, #12]
 800151e:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	897a      	ldrh	r2, [r7, #10]
 8001524:	839a      	strh	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	689a      	ldr	r2, [r3, #8]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	89fa      	ldrh	r2, [r7, #14]
 8001532:	841a      	strh	r2, [r3, #32]
}
 8001534:	3714      	adds	r7, #20
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	40010000 	.word	0x40010000
 8001544:	40010400 	.word	0x40010400

08001548 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001548:	b480      	push	{r7}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8001552:	2300      	movs	r3, #0
 8001554:	81bb      	strh	r3, [r7, #12]
 8001556:	2300      	movs	r3, #0
 8001558:	817b      	strh	r3, [r7, #10]
 800155a:	2300      	movs	r3, #0
 800155c:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	8c1b      	ldrh	r3, [r3, #32]
 8001562:	b29b      	uxth	r3, r3
 8001564:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001568:	b29a      	uxth	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	8c1b      	ldrh	r3, [r3, #32]
 8001572:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	889b      	ldrh	r3, [r3, #4]
 8001578:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	8b9b      	ldrh	r3, [r3, #28]
 800157e:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
 8001580:	89bb      	ldrh	r3, [r7, #12]
 8001582:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001586:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 8001588:	89bb      	ldrh	r3, [r7, #12]
 800158a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800158e:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	881b      	ldrh	r3, [r3, #0]
 8001594:	021b      	lsls	r3, r3, #8
 8001596:	b29a      	uxth	r2, r3
 8001598:	89bb      	ldrh	r3, [r7, #12]
 800159a:	4313      	orrs	r3, r2
 800159c:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 800159e:	897b      	ldrh	r3, [r7, #10]
 80015a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80015a4:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	899b      	ldrh	r3, [r3, #12]
 80015aa:	031b      	lsls	r3, r3, #12
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	897b      	ldrh	r3, [r7, #10]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	885b      	ldrh	r3, [r3, #2]
 80015b8:	031b      	lsls	r3, r3, #12
 80015ba:	b29a      	uxth	r2, r3
 80015bc:	897b      	ldrh	r3, [r7, #10]
 80015be:	4313      	orrs	r3, r2
 80015c0:	817b      	strh	r3, [r7, #10]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	4b11      	ldr	r3, [pc, #68]	; (800160c <TIM_OC4Init+0xc4>)
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d003      	beq.n	80015d2 <TIM_OC4Init+0x8a>
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	4b10      	ldr	r3, [pc, #64]	; (8001610 <TIM_OC4Init+0xc8>)
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d10a      	bne.n	80015e8 <TIM_OC4Init+0xa0>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 80015d2:	89fb      	ldrh	r3, [r7, #14]
 80015d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80015d8:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	8a1b      	ldrh	r3, [r3, #16]
 80015de:	019b      	lsls	r3, r3, #6
 80015e0:	b29a      	uxth	r2, r3
 80015e2:	89fb      	ldrh	r3, [r7, #14]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	89fa      	ldrh	r2, [r7, #14]
 80015ec:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	89ba      	ldrh	r2, [r7, #12]
 80015f2:	839a      	strh	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	689a      	ldr	r2, [r3, #8]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	897a      	ldrh	r2, [r7, #10]
 8001600:	841a      	strh	r2, [r3, #32]
}
 8001602:	3714      	adds	r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	40010000 	.word	0x40010000
 8001610:	40010400 	.word	0x40010400

08001614 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint32_t Compare1)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	683a      	ldr	r2, [r7, #0]
 8001622:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop

08001630 <TIM_SetCompare2>:
  *         peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint32_t Compare2)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	683a      	ldr	r2, [r7, #0]
 800163e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop

0800164c <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint32_t Compare3)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	683a      	ldr	r2, [r7, #0]
 800165a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop

08001668 <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint32_t Compare4)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop

08001684 <TIM_OC1PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	460b      	mov	r3, r1
 800168e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8001690:	2300      	movs	r3, #0
 8001692:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	8b1b      	ldrh	r3, [r3, #24]
 8001698:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 800169a:	89fb      	ldrh	r3, [r7, #14]
 800169c:	f023 0308 	bic.w	r3, r3, #8
 80016a0:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 80016a2:	89fa      	ldrh	r2, [r7, #14]
 80016a4:	887b      	ldrh	r3, [r7, #2]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	89fa      	ldrh	r2, [r7, #14]
 80016ae:	831a      	strh	r2, [r3, #24]
}
 80016b0:	3714      	adds	r7, #20
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop

080016bc <TIM_OC2PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	460b      	mov	r3, r1
 80016c6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 80016c8:	2300      	movs	r3, #0
 80016ca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	8b1b      	ldrh	r3, [r3, #24]
 80016d0:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 80016d2:	89fb      	ldrh	r3, [r7, #14]
 80016d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80016d8:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 80016da:	887b      	ldrh	r3, [r7, #2]
 80016dc:	021b      	lsls	r3, r3, #8
 80016de:	b29a      	uxth	r2, r3
 80016e0:	89fb      	ldrh	r3, [r7, #14]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	89fa      	ldrh	r2, [r7, #14]
 80016ea:	831a      	strh	r2, [r3, #24]
}
 80016ec:	3714      	adds	r7, #20
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop

080016f8 <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	460b      	mov	r3, r1
 8001702:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8001704:	2300      	movs	r3, #0
 8001706:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	8b9b      	ldrh	r3, [r3, #28]
 800170c:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 800170e:	89fb      	ldrh	r3, [r7, #14]
 8001710:	f023 0308 	bic.w	r3, r3, #8
 8001714:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 8001716:	89fa      	ldrh	r2, [r7, #14]
 8001718:	887b      	ldrh	r3, [r7, #2]
 800171a:	4313      	orrs	r3, r2
 800171c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	89fa      	ldrh	r2, [r7, #14]
 8001722:	839a      	strh	r2, [r3, #28]
}
 8001724:	3714      	adds	r7, #20
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop

08001730 <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	460b      	mov	r3, r1
 800173a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800173c:	2300      	movs	r3, #0
 800173e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	8b9b      	ldrh	r3, [r3, #28]
 8001744:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 8001746:	89fb      	ldrh	r3, [r7, #14]
 8001748:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800174c:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 800174e:	887b      	ldrh	r3, [r7, #2]
 8001750:	021b      	lsls	r3, r3, #8
 8001752:	b29a      	uxth	r2, r3
 8001754:	89fb      	ldrh	r3, [r7, #14]
 8001756:	4313      	orrs	r3, r2
 8001758:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	89fa      	ldrh	r2, [r7, #14]
 800175e:	839a      	strh	r2, [r3, #28]
}
 8001760:	3714      	adds	r7, #20
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop

0800176c <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	460b      	mov	r3, r1
 8001776:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001778:	78fb      	ldrb	r3, [r7, #3]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d00c      	beq.n	8001798 <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001784:	b29b      	uxth	r3, r3
 8001786:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800178a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800178e:	b29a      	uxth	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8001796:	e009      	b.n	80017ac <TIM_CtrlPWMOutputs+0x40>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800179e:	b29b      	uxth	r3, r3
 80017a0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80017a4:	b29a      	uxth	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }  
}
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop

080017b8 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b087      	sub	sp, #28
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	8179      	strh	r1, [r7, #10]
 80017c2:	813a      	strh	r2, [r7, #8]
 80017c4:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 80017c6:	2300      	movs	r3, #0
 80017c8:	82fb      	strh	r3, [r7, #22]
  uint16_t tmpccmr1 = 0;
 80017ca:	2300      	movs	r3, #0
 80017cc:	82bb      	strh	r3, [r7, #20]
  uint16_t tmpccer = 0;
 80017ce:	2300      	movs	r3, #0
 80017d0:	827b      	strh	r3, [r7, #18]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	891b      	ldrh	r3, [r3, #8]
 80017d6:	82fb      	strh	r3, [r7, #22]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	8b1b      	ldrh	r3, [r3, #24]
 80017dc:	82bb      	strh	r3, [r7, #20]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	8c1b      	ldrh	r3, [r3, #32]
 80017e2:	827b      	strh	r3, [r7, #18]

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 80017e4:	8afb      	ldrh	r3, [r7, #22]
 80017e6:	f023 0307 	bic.w	r3, r3, #7
 80017ea:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_EncoderMode;
 80017ec:	8afa      	ldrh	r2, [r7, #22]
 80017ee:	897b      	ldrh	r3, [r7, #10]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	82fb      	strh	r3, [r7, #22]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 80017f4:	8abb      	ldrh	r3, [r7, #20]
 80017f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017fa:	f023 0303 	bic.w	r3, r3, #3
 80017fe:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8001800:	8abb      	ldrh	r3, [r7, #20]
 8001802:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001806:	f043 0301 	orr.w	r3, r3, #1
 800180a:	82bb      	strh	r3, [r7, #20]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 800180c:	8a7b      	ldrh	r3, [r7, #18]
 800180e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001812:	827b      	strh	r3, [r7, #18]
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8001814:	88fb      	ldrh	r3, [r7, #6]
 8001816:	011b      	lsls	r3, r3, #4
 8001818:	b29a      	uxth	r2, r3
 800181a:	893b      	ldrh	r3, [r7, #8]
 800181c:	4313      	orrs	r3, r2
 800181e:	b29a      	uxth	r2, r3
 8001820:	8a7b      	ldrh	r3, [r7, #18]
 8001822:	4313      	orrs	r3, r2
 8001824:	827b      	strh	r3, [r7, #18]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	8afa      	ldrh	r2, [r7, #22]
 800182a:	811a      	strh	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	8aba      	ldrh	r2, [r7, #20]
 8001830:	831a      	strh	r2, [r3, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	8a7a      	ldrh	r2, [r7, #18]
 8001836:	841a      	strh	r2, [r3, #32]
}
 8001838:	371c      	adds	r7, #28
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop

08001844 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	460b      	mov	r3, r1
 800184e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	887a      	ldrh	r2, [r7, #2]
 8001854:	819a      	strh	r2, [r3, #12]
}
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	460b      	mov	r3, r1
 800186a:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800186c:	2300      	movs	r3, #0
 800186e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	891b      	ldrh	r3, [r3, #8]
 8001874:	b29a      	uxth	r2, r3
 8001876:	887b      	ldrh	r3, [r7, #2]
 8001878:	4013      	ands	r3, r2
 800187a:	b29b      	uxth	r3, r3
 800187c:	2b00      	cmp	r3, #0
 800187e:	d002      	beq.n	8001886 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8001880:	2301      	movs	r3, #1
 8001882:	73fb      	strb	r3, [r7, #15]
 8001884:	e001      	b.n	800188a <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8001886:	2300      	movs	r3, #0
 8001888:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 800188a:	7bfb      	ldrb	r3, [r7, #15]
}
 800188c:	4618      	mov	r0, r3
 800188e:	3714      	adds	r7, #20
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	460b      	mov	r3, r1
 80018a2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80018a4:	78fb      	ldrb	r3, [r7, #3]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d006      	beq.n	80018b8 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80018aa:	4b09      	ldr	r3, [pc, #36]	; (80018d0 <RCC_AHB1PeriphClockCmd+0x38>)
 80018ac:	4a08      	ldr	r2, [pc, #32]	; (80018d0 <RCC_AHB1PeriphClockCmd+0x38>)
 80018ae:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	430a      	orrs	r2, r1
 80018b4:	631a      	str	r2, [r3, #48]	; 0x30
 80018b6:	e006      	b.n	80018c6 <RCC_AHB1PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80018b8:	4b05      	ldr	r3, [pc, #20]	; (80018d0 <RCC_AHB1PeriphClockCmd+0x38>)
 80018ba:	4a05      	ldr	r2, [pc, #20]	; (80018d0 <RCC_AHB1PeriphClockCmd+0x38>)
 80018bc:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	43d2      	mvns	r2, r2
 80018c2:	400a      	ands	r2, r1
 80018c4:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	40023800 	.word	0x40023800

080018d4 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	460b      	mov	r3, r1
 80018de:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80018e0:	78fb      	ldrb	r3, [r7, #3]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d006      	beq.n	80018f4 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80018e6:	4b09      	ldr	r3, [pc, #36]	; (800190c <RCC_APB1PeriphClockCmd+0x38>)
 80018e8:	4a08      	ldr	r2, [pc, #32]	; (800190c <RCC_APB1PeriphClockCmd+0x38>)
 80018ea:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	430a      	orrs	r2, r1
 80018f0:	641a      	str	r2, [r3, #64]	; 0x40
 80018f2:	e006      	b.n	8001902 <RCC_APB1PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80018f4:	4b05      	ldr	r3, [pc, #20]	; (800190c <RCC_APB1PeriphClockCmd+0x38>)
 80018f6:	4a05      	ldr	r2, [pc, #20]	; (800190c <RCC_APB1PeriphClockCmd+0x38>)
 80018f8:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	43d2      	mvns	r2, r2
 80018fe:	400a      	ands	r2, r1
 8001900:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	40023800 	.word	0x40023800

08001910 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	460b      	mov	r3, r1
 800191a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800191c:	78fb      	ldrb	r3, [r7, #3]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d006      	beq.n	8001930 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001922:	4b09      	ldr	r3, [pc, #36]	; (8001948 <RCC_APB2PeriphClockCmd+0x38>)
 8001924:	4a08      	ldr	r2, [pc, #32]	; (8001948 <RCC_APB2PeriphClockCmd+0x38>)
 8001926:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	430a      	orrs	r2, r1
 800192c:	645a      	str	r2, [r3, #68]	; 0x44
 800192e:	e006      	b.n	800193e <RCC_APB2PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <RCC_APB2PeriphClockCmd+0x38>)
 8001932:	4a05      	ldr	r2, [pc, #20]	; (8001948 <RCC_APB2PeriphClockCmd+0x38>)
 8001934:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	43d2      	mvns	r2, r2
 800193a:	400a      	ands	r2, r1
 800193c:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	40023800 	.word	0x40023800

0800194c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800194c:	b480      	push	{r7}
 800194e:	b087      	sub	sp, #28
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8001956:	2300      	movs	r3, #0
 8001958:	617b      	str	r3, [r7, #20]
 800195a:	2300      	movs	r3, #0
 800195c:	613b      	str	r3, [r7, #16]
 800195e:	2300      	movs	r3, #0
 8001960:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001962:	2300      	movs	r3, #0
 8001964:	617b      	str	r3, [r7, #20]
 8001966:	e076      	b.n	8001a56 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	2201      	movs	r2, #1
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	4013      	ands	r3, r2
 800197a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 800197c:	68fa      	ldr	r2, [r7, #12]
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	429a      	cmp	r2, r3
 8001982:	d165      	bne.n	8001a50 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	2103      	movs	r1, #3
 800198e:	fa01 f303 	lsl.w	r3, r1, r3
 8001992:	43db      	mvns	r3, r3
 8001994:	401a      	ands	r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	791b      	ldrb	r3, [r3, #4]
 80019a2:	4619      	mov	r1, r3
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	fa01 f303 	lsl.w	r3, r1, r3
 80019ac:	431a      	orrs	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	791b      	ldrb	r3, [r3, #4]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d003      	beq.n	80019c2 <GPIO_Init+0x76>
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	791b      	ldrb	r3, [r3, #4]
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d12e      	bne.n	8001a20 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	689a      	ldr	r2, [r3, #8]
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	2103      	movs	r1, #3
 80019cc:	fa01 f303 	lsl.w	r3, r1, r3
 80019d0:	43db      	mvns	r3, r3
 80019d2:	401a      	ands	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689a      	ldr	r2, [r3, #8]
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	795b      	ldrb	r3, [r3, #5]
 80019e0:	4619      	mov	r1, r3
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ea:	431a      	orrs	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685a      	ldr	r2, [r3, #4]
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	2101      	movs	r1, #1
 80019fa:	fa01 f303 	lsl.w	r3, r1, r3
 80019fe:	43db      	mvns	r3, r3
 8001a00:	401a      	ands	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685a      	ldr	r2, [r3, #4]
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	799b      	ldrb	r3, [r3, #6]
 8001a0e:	4619      	mov	r1, r3
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	fa01 f303 	lsl.w	r3, r1, r3
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	431a      	orrs	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	68da      	ldr	r2, [r3, #12]
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	2103      	movs	r1, #3
 8001a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a30:	43db      	mvns	r3, r3
 8001a32:	401a      	ands	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	68da      	ldr	r2, [r3, #12]
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	79db      	ldrb	r3, [r3, #7]
 8001a40:	4619      	mov	r1, r3
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4a:	431a      	orrs	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	3301      	adds	r3, #1
 8001a54:	617b      	str	r3, [r7, #20]
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	2b0f      	cmp	r3, #15
 8001a5a:	d985      	bls.n	8001968 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8001a5c:	371c      	adds	r7, #28
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop

08001a68 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	460b      	mov	r3, r1
 8001a72:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	887a      	ldrh	r2, [r7, #2]
 8001a78:	831a      	strh	r2, [r3, #24]
}
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	887a      	ldrh	r2, [r7, #2]
 8001a94:	835a      	strh	r2, [r3, #26]
}
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	460a      	mov	r2, r1
 8001aac:	807a      	strh	r2, [r7, #2]
 8001aae:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001ab8:	787a      	ldrb	r2, [r7, #1]
 8001aba:	887b      	ldrh	r3, [r7, #2]
 8001abc:	f003 0307 	and.w	r3, r3, #7
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001ac8:	887b      	ldrh	r3, [r7, #2]
 8001aca:	08db      	lsrs	r3, r3, #3
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	461a      	mov	r2, r3
 8001ad0:	887b      	ldrh	r3, [r7, #2]
 8001ad2:	08db      	lsrs	r3, r3, #3
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3108      	adds	r1, #8
 8001adc:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8001ae0:	887b      	ldrh	r3, [r7, #2]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	200f      	movs	r0, #15
 8001aea:	fa00 f303 	lsl.w	r3, r0, r3
 8001aee:	43db      	mvns	r3, r3
 8001af0:	4019      	ands	r1, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	3208      	adds	r2, #8
 8001af6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8001afa:	887b      	ldrh	r3, [r7, #2]
 8001afc:	08db      	lsrs	r3, r3, #3
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	461a      	mov	r2, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	3208      	adds	r2, #8
 8001b06:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8001b10:	887b      	ldrh	r3, [r7, #2]
 8001b12:	08db      	lsrs	r3, r3, #3
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	461a      	mov	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	3208      	adds	r2, #8
 8001b1c:	68b9      	ldr	r1, [r7, #8]
 8001b1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001b22:	3714      	adds	r7, #20
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001b36:	2300      	movs	r3, #0
 8001b38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b40:	68fa      	ldr	r2, [r7, #12]
 8001b42:	4b24      	ldr	r3, [pc, #144]	; (8001bd4 <DMA_Init+0xa8>)
 8001b44:	4013      	ands	r3, r2
 8001b46:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8001b56:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001b62:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	6a1b      	ldr	r3, [r3, #32]
 8001b68:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001b6e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b74:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8001b7a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b80:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8001b82:	68fa      	ldr	r2, [r7, #12]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68fa      	ldr	r2, [r7, #12]
 8001b8c:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f023 0307 	bic.w	r3, r3, #7
 8001b9a:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	68fa      	ldr	r2, [r7, #12]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	691a      	ldr	r2, [r3, #16]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685a      	ldr	r2, [r3, #4]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	689a      	ldr	r2, [r3, #8]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	60da      	str	r2, [r3, #12]
}
 8001bca:	3714      	adds	r7, #20
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	f01c803f 	.word	0xf01c803f

08001bd8 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	460b      	mov	r3, r1
 8001be2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001be4:	78fb      	ldrb	r3, [r7, #3]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d006      	beq.n	8001bf8 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f043 0201 	orr.w	r2, r3, #1
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	601a      	str	r2, [r3, #0]
 8001bf6:	e005      	b.n	8001c04 <DMA_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f023 0201 	bic.w	r2, r3, #1
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	601a      	str	r2, [r3, #0]
  }
}
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop

08001c10 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0301 	and.w	r3, r3, #1
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d002      	beq.n	8001c2e <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	73fb      	strb	r3, [r7, #15]
 8001c2c:	e001      	b.n	8001c32 <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8001c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3714      	adds	r7, #20
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b087      	sub	sp, #28
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	4b15      	ldr	r3, [pc, #84]	; (8001cac <DMA_GetFlagStatus+0x6c>)
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d802      	bhi.n	8001c60 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8001c5a:	4b15      	ldr	r3, [pc, #84]	; (8001cb0 <DMA_GetFlagStatus+0x70>)
 8001c5c:	613b      	str	r3, [r7, #16]
 8001c5e:	e001      	b.n	8001c64 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8001c60:	4b14      	ldr	r3, [pc, #80]	; (8001cb4 <DMA_GetFlagStatus+0x74>)
 8001c62:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d003      	beq.n	8001c76 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	e002      	b.n	8001c7c <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8001c82:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8001c86:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8001c88:	68fa      	ldr	r2, [r7, #12]
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d002      	beq.n	8001c98 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8001c92:	2301      	movs	r3, #1
 8001c94:	75fb      	strb	r3, [r7, #23]
 8001c96:	e001      	b.n	8001c9c <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8001c9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	371c      	adds	r7, #28
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	4002640f 	.word	0x4002640f
 8001cb0:	40026000 	.word	0x40026000
 8001cb4:	40026400 	.word	0x40026400

08001cb8 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	4b10      	ldr	r3, [pc, #64]	; (8001d08 <DMA_ClearFlag+0x50>)
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d802      	bhi.n	8001cd0 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8001cca:	4b10      	ldr	r3, [pc, #64]	; (8001d0c <DMA_ClearFlag+0x54>)
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	e001      	b.n	8001cd4 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8001cd0:	4b0f      	ldr	r3, [pc, #60]	; (8001d10 <DMA_ClearFlag+0x58>)
 8001cd2:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d007      	beq.n	8001cee <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8001ce4:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8001ce8:	68fa      	ldr	r2, [r7, #12]
 8001cea:	60d3      	str	r3, [r2, #12]
 8001cec:	e006      	b.n	8001cfc <DMA_ClearFlag+0x44>
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8001cf4:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8001cf8:	68fa      	ldr	r2, [r7, #12]
 8001cfa:	6093      	str	r3, [r2, #8]
  }    
}
 8001cfc:	3714      	adds	r7, #20
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	4002640f 	.word	0x4002640f
 8001d0c:	40026000 	.word	0x40026000
 8001d10:	40026400 	.word	0x40026400

08001d14 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8001d20:	2300      	movs	r3, #0
 8001d22:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8001d24:	4b07      	ldr	r3, [pc, #28]	; (8001d44 <DAC_SetChannel1Data+0x30>)
 8001d26:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8001d28:	68fa      	ldr	r2, [r7, #12]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	3308      	adds	r3, #8
 8001d30:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	887a      	ldrh	r2, [r7, #2]
 8001d36:	601a      	str	r2, [r3, #0]
}
 8001d38:	3714      	adds	r7, #20
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	40007400 	.word	0x40007400

08001d48 <_ZN3PwmC1EP12GPIO_TypeDefmP11TIM_TypeDefhhh>:
 *  Created on: Mar 12, 2016
 *      Author: lenovoi7
 */

#include "Pwm.h"
Pwm::Pwm(GPIO_TypeDef* Port, uint32_t Pin, TIM_TypeDef * Tim, uint8_t Af_Pin, uint8_t Af, uint8_t Channel)
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b08e      	sub	sp, #56	; 0x38
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
 8001d54:	603b      	str	r3, [r7, #0]
{
	if(Port == GPIOA)
 8001d56:	68ba      	ldr	r2, [r7, #8]
 8001d58:	4b64      	ldr	r3, [pc, #400]	; (8001eec <_ZN3PwmC1EP12GPIO_TypeDefmP11TIM_TypeDefhhh+0x1a4>)
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d103      	bne.n	8001d66 <_ZN3PwmC1EP12GPIO_TypeDefmP11TIM_TypeDefhhh+0x1e>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8001d5e:	2001      	movs	r0, #1
 8001d60:	2101      	movs	r1, #1
 8001d62:	f7ff fd99 	bl	8001898 <RCC_AHB1PeriphClockCmd>
	if(Port == GPIOB)
 8001d66:	68ba      	ldr	r2, [r7, #8]
 8001d68:	4b61      	ldr	r3, [pc, #388]	; (8001ef0 <_ZN3PwmC1EP12GPIO_TypeDefmP11TIM_TypeDefhhh+0x1a8>)
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d103      	bne.n	8001d76 <_ZN3PwmC1EP12GPIO_TypeDefmP11TIM_TypeDefhhh+0x2e>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8001d6e:	2002      	movs	r0, #2
 8001d70:	2101      	movs	r1, #1
 8001d72:	f7ff fd91 	bl	8001898 <RCC_AHB1PeriphClockCmd>
	if(Port == GPIOC)
 8001d76:	68ba      	ldr	r2, [r7, #8]
 8001d78:	4b5e      	ldr	r3, [pc, #376]	; (8001ef4 <_ZN3PwmC1EP12GPIO_TypeDefmP11TIM_TypeDefhhh+0x1ac>)
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d103      	bne.n	8001d86 <_ZN3PwmC1EP12GPIO_TypeDefmP11TIM_TypeDefhhh+0x3e>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8001d7e:	2004      	movs	r0, #4
 8001d80:	2101      	movs	r1, #1
 8001d82:	f7ff fd89 	bl	8001898 <RCC_AHB1PeriphClockCmd>
	if(Port == GPIOD)
 8001d86:	68ba      	ldr	r2, [r7, #8]
 8001d88:	4b5b      	ldr	r3, [pc, #364]	; (8001ef8 <_ZN3PwmC1EP12GPIO_TypeDefmP11TIM_TypeDefhhh+0x1b0>)
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d103      	bne.n	8001d96 <_ZN3PwmC1EP12GPIO_TypeDefmP11TIM_TypeDefhhh+0x4e>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8001d8e:	2008      	movs	r0, #8
 8001d90:	2101      	movs	r1, #1
 8001d92:	f7ff fd81 	bl	8001898 <RCC_AHB1PeriphClockCmd>
	if(Port == GPIOE)
 8001d96:	68ba      	ldr	r2, [r7, #8]
 8001d98:	4b58      	ldr	r3, [pc, #352]	; (8001efc <_ZN3PwmC1EP12GPIO_TypeDefmP11TIM_TypeDefhhh+0x1b4>)
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d103      	bne.n	8001da6 <_ZN3PwmC1EP12GPIO_TypeDefmP11TIM_TypeDefhhh+0x5e>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8001d9e:	2010      	movs	r0, #16
 8001da0:	2101      	movs	r1, #1
 8001da2:	f7ff fd79 	bl	8001898 <RCC_AHB1PeriphClockCmd>
	if(Tim == TIM1)
 8001da6:	683a      	ldr	r2, [r7, #0]
 8001da8:	4b55      	ldr	r3, [pc, #340]	; (8001f00 <_ZN3PwmC1EP12GPIO_TypeDefmP11TIM_TypeDefhhh+0x1b8>)
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d103      	bne.n	8001db6 <_ZN3PwmC1EP12GPIO_TypeDefmP11TIM_TypeDefhhh+0x6e>
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 8001dae:	2001      	movs	r0, #1
 8001db0:	2101      	movs	r1, #1
 8001db2:	f7ff fdad 	bl	8001910 <RCC_APB2PeriphClockCmd>
	if(Tim == TIM8)
 8001db6:	683a      	ldr	r2, [r7, #0]
 8001db8:	4b52      	ldr	r3, [pc, #328]	; (8001f04 <_ZN3PwmC1EP12GPIO_TypeDefmP11TIM_TypeDefhhh+0x1bc>)
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d103      	bne.n	8001dc6 <_ZN3PwmC1EP12GPIO_TypeDefmP11TIM_TypeDefhhh+0x7e>
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM8, ENABLE);
 8001dbe:	2002      	movs	r0, #2
 8001dc0:	2101      	movs	r1, #1
 8001dc2:	f7ff fda5 	bl	8001910 <RCC_APB2PeriphClockCmd>

	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	GPIO_InitStructure.GPIO_Pin =  Pin;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_Init(Port, &GPIO_InitStructure); //onias
 8001de2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001de6:	68b8      	ldr	r0, [r7, #8]
 8001de8:	4619      	mov	r1, r3
 8001dea:	f7ff fdaf 	bl	800194c <GPIO_Init>
	GPIO_PinAFConfig(Port, Af_Pin, Af);
 8001dee:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001df8:	68b8      	ldr	r0, [r7, #8]
 8001dfa:	4611      	mov	r1, r2
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	f7ff fe4f 	bl	8001aa0 <GPIO_PinAFConfig>

	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;

	TIM_TimeBaseStructure.TIM_ClockDivision=TIM_CKD_DIV1;
 8001e02:	2300      	movs	r3, #0
 8001e04:	85bb      	strh	r3, [r7, #44]	; 0x2c
	TIM_TimeBaseStructure.TIM_CounterMode=TIM_CounterMode_Up;
 8001e06:	2300      	movs	r3, #0
 8001e08:	84fb      	strh	r3, [r7, #38]	; 0x26
	TIM_TimeBaseStructure.TIM_Prescaler=(SystemCoreClock/168000000)-1;
 8001e0a:	4b3f      	ldr	r3, [pc, #252]	; (8001f08 <_ZN3PwmC1EP12GPIO_TypeDefmP11TIM_TypeDefhhh+0x1c0>)
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	4b3f      	ldr	r3, [pc, #252]	; (8001f0c <_ZN3PwmC1EP12GPIO_TypeDefmP11TIM_TypeDefhhh+0x1c4>)
 8001e10:	fba3 1302 	umull	r1, r3, r3, r2
 8001e14:	0e9b      	lsrs	r3, r3, #26
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	3b01      	subs	r3, #1
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	84bb      	strh	r3, [r7, #36]	; 0x24
	TIM_TimeBaseStructure.TIM_Period=168000000/168000;
 8001e1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e22:	62bb      	str	r3, [r7, #40]	; 0x28

	TIM_TimeBaseInit(Tim, &TIM_TimeBaseStructure);
 8001e24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e28:	6838      	ldr	r0, [r7, #0]
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	f7ff f940 	bl	80010b0 <TIM_TimeBaseInit>

	TIM_OCInitTypeDef TIM_OCInitStructure;
	TIM_OCInitStructure.TIM_OCMode=TIM_OCMode_PWM1;
 8001e30:	2360      	movs	r3, #96	; 0x60
 8001e32:	823b      	strh	r3, [r7, #16]
	TIM_OCInitStructure.TIM_OutputState=TIM_OutputState_Enable;
 8001e34:	2301      	movs	r3, #1
 8001e36:	827b      	strh	r3, [r7, #18]
	TIM_OCInitStructure.TIM_OutputNState=TIM_OutputNState_Disable;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	82bb      	strh	r3, [r7, #20]
	TIM_OCInitStructure.TIM_Pulse=0;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	61bb      	str	r3, [r7, #24]
	TIM_OCInitStructure.TIM_OCPolarity=TIM_OCPolarity_Low;
 8001e40:	2302      	movs	r3, #2
 8001e42:	83bb      	strh	r3, [r7, #28]
	TIM_OCInitStructure.TIM_OCIdleState=TIM_OCIdleState_Set;
 8001e44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e48:	843b      	strh	r3, [r7, #32]

	if(Channel==1){
 8001e4a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d109      	bne.n	8001e66 <_ZN3PwmC1EP12GPIO_TypeDefmP11TIM_TypeDefhhh+0x11e>
		TIM_OC1Init(Tim, &TIM_OCInitStructure);
 8001e52:	f107 0310 	add.w	r3, r7, #16
 8001e56:	6838      	ldr	r0, [r7, #0]
 8001e58:	4619      	mov	r1, r3
 8001e5a:	f7ff f9ed 	bl	8001238 <TIM_OC1Init>
		TIM_OC1PreloadConfig(Tim, TIM_OCPreload_Enable);
 8001e5e:	6838      	ldr	r0, [r7, #0]
 8001e60:	2108      	movs	r1, #8
 8001e62:	f7ff fc0f 	bl	8001684 <TIM_OC1PreloadConfig>
	}
	if(Channel==2){
 8001e66:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d109      	bne.n	8001e82 <_ZN3PwmC1EP12GPIO_TypeDefmP11TIM_TypeDefhhh+0x13a>
		TIM_OC2Init(Tim, &TIM_OCInitStructure);
 8001e6e:	f107 0310 	add.w	r3, r7, #16
 8001e72:	6838      	ldr	r0, [r7, #0]
 8001e74:	4619      	mov	r1, r3
 8001e76:	f7ff fa59 	bl	800132c <TIM_OC2Init>
		TIM_OC2PreloadConfig(Tim, TIM_OCPreload_Enable);
 8001e7a:	6838      	ldr	r0, [r7, #0]
 8001e7c:	2108      	movs	r1, #8
 8001e7e:	f7ff fc1d 	bl	80016bc <TIM_OC2PreloadConfig>
	}
	if(Channel==3){
 8001e82:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001e86:	2b03      	cmp	r3, #3
 8001e88:	d109      	bne.n	8001e9e <_ZN3PwmC1EP12GPIO_TypeDefmP11TIM_TypeDefhhh+0x156>
		TIM_OC3Init(Tim, &TIM_OCInitStructure);
 8001e8a:	f107 0310 	add.w	r3, r7, #16
 8001e8e:	6838      	ldr	r0, [r7, #0]
 8001e90:	4619      	mov	r1, r3
 8001e92:	f7ff fad3 	bl	800143c <TIM_OC3Init>
		TIM_OC3PreloadConfig(Tim, TIM_OCPreload_Enable);
 8001e96:	6838      	ldr	r0, [r7, #0]
 8001e98:	2108      	movs	r1, #8
 8001e9a:	f7ff fc2d 	bl	80016f8 <TIM_OC3PreloadConfig>
	}
	if(Channel==4){
 8001e9e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001ea2:	2b04      	cmp	r3, #4
 8001ea4:	d109      	bne.n	8001eba <_ZN3PwmC1EP12GPIO_TypeDefmP11TIM_TypeDefhhh+0x172>
		TIM_OC4Init(Tim, &TIM_OCInitStructure);
 8001ea6:	f107 0310 	add.w	r3, r7, #16
 8001eaa:	6838      	ldr	r0, [r7, #0]
 8001eac:	4619      	mov	r1, r3
 8001eae:	f7ff fb4b 	bl	8001548 <TIM_OC4Init>
		TIM_OC4PreloadConfig(Tim, TIM_OCPreload_Enable);
 8001eb2:	6838      	ldr	r0, [r7, #0]
 8001eb4:	2108      	movs	r1, #8
 8001eb6:	f7ff fc3b 	bl	8001730 <TIM_OC4PreloadConfig>
	}

	TIM_ARRPreloadConfig(Tim, ENABLE);
 8001eba:	6838      	ldr	r0, [r7, #0]
 8001ebc:	2101      	movs	r1, #1
 8001ebe:	f7ff f97b 	bl	80011b8 <TIM_ARRPreloadConfig>

	TIM_Cmd(Tim, ENABLE);
 8001ec2:	6838      	ldr	r0, [r7, #0]
 8001ec4:	2101      	movs	r1, #1
 8001ec6:	f7ff f997 	bl	80011f8 <TIM_Cmd>
	TIM_CtrlPWMOutputs(Tim,ENABLE);
 8001eca:	6838      	ldr	r0, [r7, #0]
 8001ecc:	2101      	movs	r1, #1
 8001ece:	f7ff fc4d 	bl	800176c <TIM_CtrlPWMOutputs>
	PWM_Tim = Tim;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	683a      	ldr	r2, [r7, #0]
 8001ed6:	605a      	str	r2, [r3, #4]
	PWM_Channel = Channel;
 8001ed8:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	701a      	strb	r2, [r3, #0]
};
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3738      	adds	r7, #56	; 0x38
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40020000 	.word	0x40020000
 8001ef0:	40020400 	.word	0x40020400
 8001ef4:	40020800 	.word	0x40020800
 8001ef8:	40020c00 	.word	0x40020c00
 8001efc:	40021000 	.word	0x40021000
 8001f00:	40010000 	.word	0x40010000
 8001f04:	40010400 	.word	0x40010400
 8001f08:	20000000 	.word	0x20000000
 8001f0c:	6642d929 	.word	0x6642d929

08001f10 <_ZN3Pwm13set_DutyCycleEt>:

void Pwm::set_DutyCycle(uint16_t duty_cycle1){
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	460b      	mov	r3, r1
 8001f1a:	807b      	strh	r3, [r7, #2]
	if(PWM_Channel == 1)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	b25b      	sxtb	r3, r3
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d106      	bne.n	8001f34 <_ZN3Pwm13set_DutyCycleEt+0x24>
		TIM_SetCompare1(PWM_Tim, duty_cycle1);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685a      	ldr	r2, [r3, #4]
 8001f2a:	887b      	ldrh	r3, [r7, #2]
 8001f2c:	4610      	mov	r0, r2
 8001f2e:	4619      	mov	r1, r3
 8001f30:	f7ff fb70 	bl	8001614 <TIM_SetCompare1>
	if(PWM_Channel == 2)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	b25b      	sxtb	r3, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d106      	bne.n	8001f4c <_ZN3Pwm13set_DutyCycleEt+0x3c>
		TIM_SetCompare2(PWM_Tim, duty_cycle1);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685a      	ldr	r2, [r3, #4]
 8001f42:	887b      	ldrh	r3, [r7, #2]
 8001f44:	4610      	mov	r0, r2
 8001f46:	4619      	mov	r1, r3
 8001f48:	f7ff fb72 	bl	8001630 <TIM_SetCompare2>
	if(PWM_Channel == 3)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	b25b      	sxtb	r3, r3
 8001f52:	2b03      	cmp	r3, #3
 8001f54:	d106      	bne.n	8001f64 <_ZN3Pwm13set_DutyCycleEt+0x54>
		TIM_SetCompare3(PWM_Tim, duty_cycle1);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685a      	ldr	r2, [r3, #4]
 8001f5a:	887b      	ldrh	r3, [r7, #2]
 8001f5c:	4610      	mov	r0, r2
 8001f5e:	4619      	mov	r1, r3
 8001f60:	f7ff fb74 	bl	800164c <TIM_SetCompare3>
	if(PWM_Channel == 4)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	b25b      	sxtb	r3, r3
 8001f6a:	2b04      	cmp	r3, #4
 8001f6c:	d106      	bne.n	8001f7c <_ZN3Pwm13set_DutyCycleEt+0x6c>
		TIM_SetCompare4(PWM_Tim, duty_cycle1);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685a      	ldr	r2, [r3, #4]
 8001f72:	887b      	ldrh	r3, [r7, #2]
 8001f74:	4610      	mov	r0, r2
 8001f76:	4619      	mov	r1, r3
 8001f78:	f7ff fb76 	bl	8001668 <TIM_SetCompare4>
	return;
 8001f7c:	bf00      	nop
};
 8001f7e:	3708      	adds	r7, #8
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <_ZN5MotorC1EP3PwmP4GPIOS1_S3_P7Encoder>:
 *  Created on: Mar 12, 2016
 *      Author: lenovoi7
 */
#include "Motor.h"

Motor::Motor(Pwm *A_High,
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
 8001f90:	603b      	str	r3, [r7, #0]
		GPIO *A_Low,
		Pwm *B_High,
		GPIO *B_Low,
		Encoder *Enc)
{
	Motor_A_High = A_High;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	68ba      	ldr	r2, [r7, #8]
 8001f96:	601a      	str	r2, [r3, #0]
	Motor_A_Low = A_Low;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	609a      	str	r2, [r3, #8]
	Motor_B_High = B_High;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	683a      	ldr	r2, [r7, #0]
 8001fa2:	605a      	str	r2, [r3, #4]
	Motor_B_Low = B_Low;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	60da      	str	r2, [r3, #12]
	Motor_Enc = Enc;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	69fa      	ldr	r2, [r7, #28]
 8001fae:	611a      	str	r2, [r3, #16]
}
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3714      	adds	r7, #20
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop

08001fc0 <_ZN5Motor11Control_PosEm>:

void Motor::Control_Pos(uint32_t hold_position){
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
	uint32_t position;
	int16_t answer;
	position = Motor_Enc->position();
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f000 fa5a 	bl	8002488 <_ZN7Encoder8positionEv>
 8001fd4:	60f8      	str	r0, [r7, #12]
	answer = this->Pos_Calc_Answer(position, hold_position);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	68f9      	ldr	r1, [r7, #12]
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	f000 f860 	bl	80020a0 <_ZN5Motor15Pos_Calc_AnswerEmm>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	817b      	strh	r3, [r7, #10]
	this->Answer(answer);
 8001fe4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	4619      	mov	r1, r3
 8001fec:	f000 f804 	bl	8001ff8 <_ZN5Motor6AnswerEs>
	return;
 8001ff0:	bf00      	nop
};
 8001ff2:	3710      	adds	r7, #16
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <_ZN5Motor6AnswerEs>:
void Motor::Control_Speed(int16_t hold_speed){

};

void Motor::Answer(int16_t answer)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	460b      	mov	r3, r1
 8002002:	807b      	strh	r3, [r7, #2]
	if (answer > 0)
 8002004:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002008:	2b00      	cmp	r3, #0
 800200a:	dd1f      	ble.n	800204c <_ZN5Motor6AnswerEs+0x54>
	{
		if (answer>1000)
 800200c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002010:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002014:	dd02      	ble.n	800201c <_ZN5Motor6AnswerEs+0x24>
		{
			answer=1000;
 8002016:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800201a:	807b      	strh	r3, [r7, #2]
		}
		Motor_A_Low->Reset();
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	4618      	mov	r0, r3
 8002022:	f000 f95f 	bl	80022e4 <_ZN4GPIO5ResetEv>
		Motor_B_High->set_DutyCycle(0);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	4618      	mov	r0, r3
 800202c:	2100      	movs	r1, #0
 800202e:	f7ff ff6f 	bl	8001f10 <_ZN3Pwm13set_DutyCycleEt>
		Motor_A_High->set_DutyCycle(answer);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	887b      	ldrh	r3, [r7, #2]
 8002038:	4610      	mov	r0, r2
 800203a:	4619      	mov	r1, r3
 800203c:	f7ff ff68 	bl	8001f10 <_ZN3Pwm13set_DutyCycleEt>
		Motor_B_Low->Set();
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	4618      	mov	r0, r3
 8002046:	f000 f93d 	bl	80022c4 <_ZN4GPIO3SetEv>
 800204a:	e022      	b.n	8002092 <_ZN5Motor6AnswerEs+0x9a>
	}
	else
	{
		answer=-answer;
 800204c:	887b      	ldrh	r3, [r7, #2]
 800204e:	425b      	negs	r3, r3
 8002050:	b29b      	uxth	r3, r3
 8002052:	807b      	strh	r3, [r7, #2]
		if(answer>1000)
 8002054:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002058:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800205c:	dd02      	ble.n	8002064 <_ZN5Motor6AnswerEs+0x6c>
		{
			answer=1000;
 800205e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002062:	807b      	strh	r3, [r7, #2]
		}
		Motor_B_Low->Reset();
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	4618      	mov	r0, r3
 800206a:	f000 f93b 	bl	80022e4 <_ZN4GPIO5ResetEv>
		Motor_A_High->set_DutyCycle(0);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	2100      	movs	r1, #0
 8002076:	f7ff ff4b 	bl	8001f10 <_ZN3Pwm13set_DutyCycleEt>
		Motor_B_High->set_DutyCycle(answer);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685a      	ldr	r2, [r3, #4]
 800207e:	887b      	ldrh	r3, [r7, #2]
 8002080:	4610      	mov	r0, r2
 8002082:	4619      	mov	r1, r3
 8002084:	f7ff ff44 	bl	8001f10 <_ZN3Pwm13set_DutyCycleEt>
		Motor_A_Low->Set();
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	4618      	mov	r0, r3
 800208e:	f000 f919 	bl	80022c4 <_ZN4GPIO3SetEv>
	}
	return;
 8002092:	bf00      	nop
}
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	0000      	movs	r0, r0
	...

080020a0 <_ZN5Motor15Pos_Calc_AnswerEmm>:
int16_t Motor::Pos_Calc_Answer(uint32_t position, uint32_t hold_position)
{
 80020a0:	b5b0      	push	{r4, r5, r7, lr}
 80020a2:	b088      	sub	sp, #32
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
	int16_t integral;
	int16_t error;
	int16_t derivative;
	int i;
//verde oliva
	error = (int16_t) (position - hold_position);
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	82fb      	strh	r3, [r7, #22]
	for(i=0; i<19; i++){
 80020ba:	2300      	movs	r3, #0
 80020bc:	61bb      	str	r3, [r7, #24]
 80020be:	e00f      	b.n	80020e0 <_ZN5Motor15Pos_Calc_AnswerEmm+0x40>
		Pos_Last_Error[i]=Pos_Last_Error[i+1];
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	3301      	adds	r3, #1
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	331c      	adds	r3, #28
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	4413      	add	r3, r2
 80020cc:	889a      	ldrh	r2, [r3, #4]
 80020ce:	68f9      	ldr	r1, [r7, #12]
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	331c      	adds	r3, #28
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	440b      	add	r3, r1
 80020d8:	809a      	strh	r2, [r3, #4]
	int16_t error;
	int16_t derivative;
	int i;
//verde oliva
	error = (int16_t) (position - hold_position);
	for(i=0; i<19; i++){
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	3301      	adds	r3, #1
 80020de:	61bb      	str	r3, [r7, #24]
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	2b12      	cmp	r3, #18
 80020e4:	ddec      	ble.n	80020c0 <_ZN5Motor15Pos_Calc_AnswerEmm+0x20>
		Pos_Last_Error[i]=Pos_Last_Error[i+1];
	}
	Pos_Last_Error[19] = error;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	8afa      	ldrh	r2, [r7, #22]
 80020ea:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
	integral=0;
 80020ee:	2300      	movs	r3, #0
 80020f0:	83fb      	strh	r3, [r7, #30]
	derivative=Pos_Last_Error[19]-Pos_Last_Error[18];
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8002100:	b29b      	uxth	r3, r3
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	b29b      	uxth	r3, r3
 8002106:	82bb      	strh	r3, [r7, #20]

	for(i=0; i<20; i++){
 8002108:	2300      	movs	r3, #0
 800210a:	61bb      	str	r3, [r7, #24]
 800210c:	e00d      	b.n	800212a <_ZN5Motor15Pos_Calc_AnswerEmm+0x8a>
		integral = integral+Pos_Last_Error[i];
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	331c      	adds	r3, #28
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	4413      	add	r3, r2
 8002118:	889b      	ldrh	r3, [r3, #4]
 800211a:	b29a      	uxth	r2, r3
 800211c:	8bfb      	ldrh	r3, [r7, #30]
 800211e:	4413      	add	r3, r2
 8002120:	b29b      	uxth	r3, r3
 8002122:	83fb      	strh	r3, [r7, #30]
	}
	Pos_Last_Error[19] = error;
	integral=0;
	derivative=Pos_Last_Error[19]-Pos_Last_Error[18];

	for(i=0; i<20; i++){
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	3301      	adds	r3, #1
 8002128:	61bb      	str	r3, [r7, #24]
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	2b13      	cmp	r3, #19
 800212e:	ddee      	ble.n	800210e <_ZN5Motor15Pos_Calc_AnswerEmm+0x6e>
		integral = integral+Pos_Last_Error[i];
	}
	if (integral > 600/0.18) integral = 600/0.18;
 8002130:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002134:	4618      	mov	r0, r3
 8002136:	f7fe f999 	bl	800046c <__aeabi_i2d>
 800213a:	4602      	mov	r2, r0
 800213c:	460b      	mov	r3, r1
 800213e:	4610      	mov	r0, r2
 8002140:	4619      	mov	r1, r3
 8002142:	a32c      	add	r3, pc, #176	; (adr r3, 80021f4 <_ZN5Motor15Pos_Calc_AnswerEmm+0x154>)
 8002144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002148:	f7fe fc86 	bl	8000a58 <__aeabi_dcmpgt>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d002      	beq.n	8002158 <_ZN5Motor15Pos_Calc_AnswerEmm+0xb8>
 8002152:	f640 5305 	movw	r3, #3333	; 0xd05
 8002156:	83fb      	strh	r3, [r7, #30]
	return (int16_t) ((error)*0.81+(integral)*0.18 - derivative*2.25);
 8002158:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800215c:	4618      	mov	r0, r3
 800215e:	f7fe f985 	bl	800046c <__aeabi_i2d>
 8002162:	4602      	mov	r2, r0
 8002164:	460b      	mov	r3, r1
 8002166:	4610      	mov	r0, r2
 8002168:	4619      	mov	r1, r3
 800216a:	a324      	add	r3, pc, #144	; (adr r3, 80021fc <_ZN5Motor15Pos_Calc_AnswerEmm+0x15c>)
 800216c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002170:	f7fe f9e2 	bl	8000538 <__aeabi_dmul>
 8002174:	4602      	mov	r2, r0
 8002176:	460b      	mov	r3, r1
 8002178:	4614      	mov	r4, r2
 800217a:	461d      	mov	r5, r3
 800217c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002180:	4618      	mov	r0, r3
 8002182:	f7fe f973 	bl	800046c <__aeabi_i2d>
 8002186:	4602      	mov	r2, r0
 8002188:	460b      	mov	r3, r1
 800218a:	4610      	mov	r0, r2
 800218c:	4619      	mov	r1, r3
 800218e:	a31d      	add	r3, pc, #116	; (adr r3, 8002204 <_ZN5Motor15Pos_Calc_AnswerEmm+0x164>)
 8002190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002194:	f7fe f9d0 	bl	8000538 <__aeabi_dmul>
 8002198:	4602      	mov	r2, r0
 800219a:	460b      	mov	r3, r1
 800219c:	4620      	mov	r0, r4
 800219e:	4629      	mov	r1, r5
 80021a0:	f7fe f818 	bl	80001d4 <__adddf3>
 80021a4:	4602      	mov	r2, r0
 80021a6:	460b      	mov	r3, r1
 80021a8:	4614      	mov	r4, r2
 80021aa:	461d      	mov	r5, r3
 80021ac:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7fe f95b 	bl	800046c <__aeabi_i2d>
 80021b6:	4602      	mov	r2, r0
 80021b8:	460b      	mov	r3, r1
 80021ba:	4610      	mov	r0, r2
 80021bc:	4619      	mov	r1, r3
 80021be:	f04f 0200 	mov.w	r2, #0
 80021c2:	4b0b      	ldr	r3, [pc, #44]	; (80021f0 <_ZN5Motor15Pos_Calc_AnswerEmm+0x150>)
 80021c4:	f7fe f9b8 	bl	8000538 <__aeabi_dmul>
 80021c8:	4602      	mov	r2, r0
 80021ca:	460b      	mov	r3, r1
 80021cc:	4620      	mov	r0, r4
 80021ce:	4629      	mov	r1, r5
 80021d0:	f7fd fffe 	bl	80001d0 <__aeabi_dsub>
 80021d4:	4602      	mov	r2, r0
 80021d6:	460b      	mov	r3, r1
 80021d8:	4610      	mov	r0, r2
 80021da:	4619      	mov	r1, r3
 80021dc:	f7fe fc46 	bl	8000a6c <__aeabi_d2iz>
 80021e0:	4603      	mov	r3, r0
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	b21b      	sxth	r3, r3
	//Kp = 0.81, Ki = 0.36, Kd = 2.25
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3720      	adds	r7, #32
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bdb0      	pop	{r4, r5, r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40020000 	.word	0x40020000
 80021f4:	aaaaaaab 	.word	0xaaaaaaab
 80021f8:	40aa0aaa 	.word	0x40aa0aaa
 80021fc:	1eb851ec 	.word	0x1eb851ec
 8002200:	3fe9eb85 	.word	0x3fe9eb85
 8002204:	70a3d70a 	.word	0x70a3d70a
 8002208:	3fc70a3d 	.word	0x3fc70a3d
 800220c:	f3af 8000 	nop.w

08002210 <_ZN4GPIOC1EP12GPIO_TypeDeft>:
 *  Created on: Mar 12, 2016
 *      Author: lenovoi7
 */

#include "GPIO.h"
GPIO::GPIO(GPIO_TypeDef* Port, uint16_t Pin) {
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	4613      	mov	r3, r2
 800221c:	80fb      	strh	r3, [r7, #6]
	if(Port == GPIOA)
 800221e:	68ba      	ldr	r2, [r7, #8]
 8002220:	4b23      	ldr	r3, [pc, #140]	; (80022b0 <_ZN4GPIOC1EP12GPIO_TypeDeft+0xa0>)
 8002222:	429a      	cmp	r2, r3
 8002224:	d103      	bne.n	800222e <_ZN4GPIOC1EP12GPIO_TypeDeft+0x1e>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8002226:	2001      	movs	r0, #1
 8002228:	2101      	movs	r1, #1
 800222a:	f7ff fb35 	bl	8001898 <RCC_AHB1PeriphClockCmd>
	if(Port == GPIOB)
 800222e:	68ba      	ldr	r2, [r7, #8]
 8002230:	4b20      	ldr	r3, [pc, #128]	; (80022b4 <_ZN4GPIOC1EP12GPIO_TypeDeft+0xa4>)
 8002232:	429a      	cmp	r2, r3
 8002234:	d103      	bne.n	800223e <_ZN4GPIOC1EP12GPIO_TypeDeft+0x2e>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8002236:	2002      	movs	r0, #2
 8002238:	2101      	movs	r1, #1
 800223a:	f7ff fb2d 	bl	8001898 <RCC_AHB1PeriphClockCmd>
	if(Port == GPIOC)
 800223e:	68ba      	ldr	r2, [r7, #8]
 8002240:	4b1d      	ldr	r3, [pc, #116]	; (80022b8 <_ZN4GPIOC1EP12GPIO_TypeDeft+0xa8>)
 8002242:	429a      	cmp	r2, r3
 8002244:	d103      	bne.n	800224e <_ZN4GPIOC1EP12GPIO_TypeDeft+0x3e>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8002246:	2004      	movs	r0, #4
 8002248:	2101      	movs	r1, #1
 800224a:	f7ff fb25 	bl	8001898 <RCC_AHB1PeriphClockCmd>
	if(Port == GPIOD)
 800224e:	68ba      	ldr	r2, [r7, #8]
 8002250:	4b1a      	ldr	r3, [pc, #104]	; (80022bc <_ZN4GPIOC1EP12GPIO_TypeDeft+0xac>)
 8002252:	429a      	cmp	r2, r3
 8002254:	d103      	bne.n	800225e <_ZN4GPIOC1EP12GPIO_TypeDeft+0x4e>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8002256:	2008      	movs	r0, #8
 8002258:	2101      	movs	r1, #1
 800225a:	f7ff fb1d 	bl	8001898 <RCC_AHB1PeriphClockCmd>
	if(Port == GPIOE)
 800225e:	68ba      	ldr	r2, [r7, #8]
 8002260:	4b17      	ldr	r3, [pc, #92]	; (80022c0 <_ZN4GPIOC1EP12GPIO_TypeDeft+0xb0>)
 8002262:	429a      	cmp	r2, r3
 8002264:	d103      	bne.n	800226e <_ZN4GPIOC1EP12GPIO_TypeDeft+0x5e>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8002266:	2010      	movs	r0, #16
 8002268:	2101      	movs	r1, #1
 800226a:	f7ff fb15 	bl	8001898 <RCC_AHB1PeriphClockCmd>
	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 800226e:	2301      	movs	r3, #1
 8002270:	753b      	strb	r3, [r7, #20]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002272:	2300      	movs	r3, #0
 8002274:	75bb      	strb	r3, [r7, #22]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002276:	2302      	movs	r3, #2
 8002278:	757b      	strb	r3, [r7, #21]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 800227a:	2301      	movs	r3, #1
 800227c:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStructure.GPIO_Pin = Pin;
 800227e:	88fb      	ldrh	r3, [r7, #6]
 8002280:	613b      	str	r3, [r7, #16]
	GPIO_Init(Port,&GPIO_InitStructure);
 8002282:	f107 0310 	add.w	r3, r7, #16
 8002286:	68b8      	ldr	r0, [r7, #8]
 8002288:	4619      	mov	r1, r3
 800228a:	f7ff fb5f 	bl	800194c <GPIO_Init>

	GPIO_ResetBits(Port, Pin);
 800228e:	88fb      	ldrh	r3, [r7, #6]
 8002290:	68b8      	ldr	r0, [r7, #8]
 8002292:	4619      	mov	r1, r3
 8002294:	f7ff fbf6 	bl	8001a84 <GPIO_ResetBits>
	GPIO_Port = Port;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	68ba      	ldr	r2, [r7, #8]
 800229c:	601a      	str	r2, [r3, #0]
	GPIO_Pin = Pin;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	88fa      	ldrh	r2, [r7, #6]
 80022a2:	809a      	strh	r2, [r3, #4]
}
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	4618      	mov	r0, r3
 80022a8:	3718      	adds	r7, #24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	40020000 	.word	0x40020000
 80022b4:	40020400 	.word	0x40020400
 80022b8:	40020800 	.word	0x40020800
 80022bc:	40020c00 	.word	0x40020c00
 80022c0:	40021000 	.word	0x40021000

080022c4 <_ZN4GPIO3SetEv>:
void GPIO::Set(){
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
	GPIO_SetBits(GPIO_Port, GPIO_Pin);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	889b      	ldrh	r3, [r3, #4]
 80022d4:	4610      	mov	r0, r2
 80022d6:	4619      	mov	r1, r3
 80022d8:	f7ff fbc6 	bl	8001a68 <GPIO_SetBits>
	return;
 80022dc:	bf00      	nop
}
 80022de:	3708      	adds	r7, #8
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <_ZN4GPIO5ResetEv>:
void GPIO::Reset(){
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
	GPIO_ResetBits(GPIO_Port, GPIO_Pin);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	889b      	ldrh	r3, [r3, #4]
 80022f4:	4610      	mov	r0, r2
 80022f6:	4619      	mov	r1, r3
 80022f8:	f7ff fbc4 	bl	8001a84 <GPIO_ResetBits>
	return;
 80022fc:	bf00      	nop
}
 80022fe:	3708      	adds	r7, #8
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <_ZN7EncoderC1EP12GPIO_TypeDefS1_mmP11TIM_TypeDefhhh>:
 *      Author: lenovoi7
 */

#include <Encoder.h>

Encoder::Encoder( GPIO_TypeDef* Port1, GPIO_TypeDef* Port2,
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
 8002310:	603b      	str	r3, [r7, #0]
	uint32_t Pin1, uint32_t Pin2,
	TIM_TypeDef * Tim, uint8_t Af_Pin1, uint8_t Af_Pin2,
	uint8_t Af)
{

	if((Port1 == GPIOA)||(Port2 == GPIOA))
 8002312:	68ba      	ldr	r2, [r7, #8]
 8002314:	4b54      	ldr	r3, [pc, #336]	; (8002468 <_ZN7EncoderC1EP12GPIO_TypeDefS1_mmP11TIM_TypeDefhhh+0x164>)
 8002316:	429a      	cmp	r2, r3
 8002318:	d003      	beq.n	8002322 <_ZN7EncoderC1EP12GPIO_TypeDefS1_mmP11TIM_TypeDefhhh+0x1e>
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	4b52      	ldr	r3, [pc, #328]	; (8002468 <_ZN7EncoderC1EP12GPIO_TypeDefS1_mmP11TIM_TypeDefhhh+0x164>)
 800231e:	429a      	cmp	r2, r3
 8002320:	d103      	bne.n	800232a <_ZN7EncoderC1EP12GPIO_TypeDefS1_mmP11TIM_TypeDefhhh+0x26>
			RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8002322:	2001      	movs	r0, #1
 8002324:	2101      	movs	r1, #1
 8002326:	f7ff fab7 	bl	8001898 <RCC_AHB1PeriphClockCmd>
	if((Port1 == GPIOB)||(Port2 == GPIOB))
 800232a:	68ba      	ldr	r2, [r7, #8]
 800232c:	4b4f      	ldr	r3, [pc, #316]	; (800246c <_ZN7EncoderC1EP12GPIO_TypeDefS1_mmP11TIM_TypeDefhhh+0x168>)
 800232e:	429a      	cmp	r2, r3
 8002330:	d003      	beq.n	800233a <_ZN7EncoderC1EP12GPIO_TypeDefS1_mmP11TIM_TypeDefhhh+0x36>
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	4b4d      	ldr	r3, [pc, #308]	; (800246c <_ZN7EncoderC1EP12GPIO_TypeDefS1_mmP11TIM_TypeDefhhh+0x168>)
 8002336:	429a      	cmp	r2, r3
 8002338:	d103      	bne.n	8002342 <_ZN7EncoderC1EP12GPIO_TypeDefS1_mmP11TIM_TypeDefhhh+0x3e>
			RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 800233a:	2002      	movs	r0, #2
 800233c:	2101      	movs	r1, #1
 800233e:	f7ff faab 	bl	8001898 <RCC_AHB1PeriphClockCmd>
	if((Port1 == GPIOC)||(Port2 == GPIOC))
 8002342:	68ba      	ldr	r2, [r7, #8]
 8002344:	4b4a      	ldr	r3, [pc, #296]	; (8002470 <_ZN7EncoderC1EP12GPIO_TypeDefS1_mmP11TIM_TypeDefhhh+0x16c>)
 8002346:	429a      	cmp	r2, r3
 8002348:	d003      	beq.n	8002352 <_ZN7EncoderC1EP12GPIO_TypeDefS1_mmP11TIM_TypeDefhhh+0x4e>
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	4b48      	ldr	r3, [pc, #288]	; (8002470 <_ZN7EncoderC1EP12GPIO_TypeDefS1_mmP11TIM_TypeDefhhh+0x16c>)
 800234e:	429a      	cmp	r2, r3
 8002350:	d103      	bne.n	800235a <_ZN7EncoderC1EP12GPIO_TypeDefS1_mmP11TIM_TypeDefhhh+0x56>
			RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8002352:	2004      	movs	r0, #4
 8002354:	2101      	movs	r1, #1
 8002356:	f7ff fa9f 	bl	8001898 <RCC_AHB1PeriphClockCmd>
	if((Port1 == GPIOD)||(Port2 == GPIOD))
 800235a:	68ba      	ldr	r2, [r7, #8]
 800235c:	4b45      	ldr	r3, [pc, #276]	; (8002474 <_ZN7EncoderC1EP12GPIO_TypeDefS1_mmP11TIM_TypeDefhhh+0x170>)
 800235e:	429a      	cmp	r2, r3
 8002360:	d003      	beq.n	800236a <_ZN7EncoderC1EP12GPIO_TypeDefS1_mmP11TIM_TypeDefhhh+0x66>
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	4b43      	ldr	r3, [pc, #268]	; (8002474 <_ZN7EncoderC1EP12GPIO_TypeDefS1_mmP11TIM_TypeDefhhh+0x170>)
 8002366:	429a      	cmp	r2, r3
 8002368:	d103      	bne.n	8002372 <_ZN7EncoderC1EP12GPIO_TypeDefS1_mmP11TIM_TypeDefhhh+0x6e>
			RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 800236a:	2008      	movs	r0, #8
 800236c:	2101      	movs	r1, #1
 800236e:	f7ff fa93 	bl	8001898 <RCC_AHB1PeriphClockCmd>
	if((Port1 == GPIOE)||(Port2 == GPIOE))
 8002372:	68ba      	ldr	r2, [r7, #8]
 8002374:	4b40      	ldr	r3, [pc, #256]	; (8002478 <_ZN7EncoderC1EP12GPIO_TypeDefS1_mmP11TIM_TypeDefhhh+0x174>)
 8002376:	429a      	cmp	r2, r3
 8002378:	d003      	beq.n	8002382 <_ZN7EncoderC1EP12GPIO_TypeDefS1_mmP11TIM_TypeDefhhh+0x7e>
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	4b3e      	ldr	r3, [pc, #248]	; (8002478 <_ZN7EncoderC1EP12GPIO_TypeDefS1_mmP11TIM_TypeDefhhh+0x174>)
 800237e:	429a      	cmp	r2, r3
 8002380:	d103      	bne.n	800238a <_ZN7EncoderC1EP12GPIO_TypeDefS1_mmP11TIM_TypeDefhhh+0x86>
			RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8002382:	2010      	movs	r0, #16
 8002384:	2101      	movs	r1, #1
 8002386:	f7ff fa87 	bl	8001898 <RCC_AHB1PeriphClockCmd>

	if(Tim == TIM2)
 800238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002390:	d103      	bne.n	800239a <_ZN7EncoderC1EP12GPIO_TypeDefS1_mmP11TIM_TypeDefhhh+0x96>
			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8002392:	2001      	movs	r0, #1
 8002394:	2101      	movs	r1, #1
 8002396:	f7ff fa9d 	bl	80018d4 <RCC_APB1PeriphClockCmd>
	if(Tim == TIM3)
 800239a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800239c:	4b37      	ldr	r3, [pc, #220]	; (800247c <_ZN7EncoderC1EP12GPIO_TypeDefS1_mmP11TIM_TypeDefhhh+0x178>)
 800239e:	429a      	cmp	r2, r3
 80023a0:	d103      	bne.n	80023aa <_ZN7EncoderC1EP12GPIO_TypeDefS1_mmP11TIM_TypeDefhhh+0xa6>
			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 80023a2:	2002      	movs	r0, #2
 80023a4:	2101      	movs	r1, #1
 80023a6:	f7ff fa95 	bl	80018d4 <RCC_APB1PeriphClockCmd>
	if(Tim == TIM4)
 80023aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ac:	4b34      	ldr	r3, [pc, #208]	; (8002480 <_ZN7EncoderC1EP12GPIO_TypeDefS1_mmP11TIM_TypeDefhhh+0x17c>)
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d103      	bne.n	80023ba <_ZN7EncoderC1EP12GPIO_TypeDefS1_mmP11TIM_TypeDefhhh+0xb6>
			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 80023b2:	2004      	movs	r0, #4
 80023b4:	2101      	movs	r1, #1
 80023b6:	f7ff fa8d 	bl	80018d4 <RCC_APB1PeriphClockCmd>
	if(Tim == TIM5)
 80023ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023bc:	4b31      	ldr	r3, [pc, #196]	; (8002484 <_ZN7EncoderC1EP12GPIO_TypeDefS1_mmP11TIM_TypeDefhhh+0x180>)
 80023be:	429a      	cmp	r2, r3
 80023c0:	d103      	bne.n	80023ca <_ZN7EncoderC1EP12GPIO_TypeDefS1_mmP11TIM_TypeDefhhh+0xc6>
			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5, ENABLE);
 80023c2:	2008      	movs	r0, #8
 80023c4:	2101      	movs	r1, #1
 80023c6:	f7ff fa85 	bl	80018d4 <RCC_APB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80023ca:	2001      	movs	r0, #1
 80023cc:	2101      	movs	r1, #1
 80023ce:	f7ff fa63 	bl	8001898 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 80023d2:	2002      	movs	r0, #2
 80023d4:	2101      	movs	r1, #1
 80023d6:	f7ff fa5f 	bl	8001898 <RCC_AHB1PeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 80023da:	2004      	movs	r0, #4
 80023dc:	2101      	movs	r1, #1
 80023de:	f7ff fa79 	bl	80018d4 <RCC_APB1PeriphClockCmd>

	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80023e2:	2300      	movs	r3, #0
 80023e4:	75bb      	strb	r3, [r7, #22]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80023e6:	2302      	movs	r3, #2
 80023e8:	757b      	strb	r3, [r7, #21]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80023ea:	2301      	movs	r3, #1
 80023ec:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80023ee:	2302      	movs	r3, #2
 80023f0:	753b      	strb	r3, [r7, #20]

	GPIO_InitStructure.GPIO_Pin = Pin1;
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	613b      	str	r3, [r7, #16]
	GPIO_Init(Port1, &GPIO_InitStructure);
 80023f6:	f107 0310 	add.w	r3, r7, #16
 80023fa:	68b8      	ldr	r0, [r7, #8]
 80023fc:	4619      	mov	r1, r3
 80023fe:	f7ff faa5 	bl	800194c <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = Pin2;
 8002402:	6a3b      	ldr	r3, [r7, #32]
 8002404:	613b      	str	r3, [r7, #16]
	GPIO_Init(Port2, &GPIO_InitStructure);
 8002406:	f107 0310 	add.w	r3, r7, #16
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	4619      	mov	r1, r3
 800240e:	f7ff fa9d 	bl	800194c <GPIO_Init>

	GPIO_PinAFConfig(Port1, Af_Pin1, Af);
 8002412:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002416:	b29a      	uxth	r2, r3
 8002418:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800241c:	68b8      	ldr	r0, [r7, #8]
 800241e:	4611      	mov	r1, r2
 8002420:	461a      	mov	r2, r3
 8002422:	f7ff fb3d 	bl	8001aa0 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(Port2, Af_Pin2, Af);
 8002426:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800242a:	b29a      	uxth	r2, r3
 800242c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	4611      	mov	r1, r2
 8002434:	461a      	mov	r2, r3
 8002436:	f7ff fb33 	bl	8001aa0 <GPIO_PinAFConfig>

	TIM_EncoderInterfaceConfig(Tim, TIM_EncoderMode_TI12, TIM_ICPolarity_Rising, TIM_ICPolarity_Rising);
 800243a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800243c:	2103      	movs	r1, #3
 800243e:	2200      	movs	r2, #0
 8002440:	2300      	movs	r3, #0
 8002442:	f7ff f9b9 	bl	80017b8 <TIM_EncoderInterfaceConfig>
	TIM_Cmd(Tim, ENABLE);
 8002446:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002448:	2101      	movs	r1, #1
 800244a:	f7fe fed5 	bl	80011f8 <TIM_Cmd>

	TIM_SetCounter(Tim, (uint32_t) 16000);
 800244e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002450:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 8002454:	f7fe fe96 	bl	8001184 <TIM_SetCounter>
	Encoder_Tim = Tim;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800245c:	601a      	str	r2, [r3, #0]
};
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	4618      	mov	r0, r3
 8002462:	3718      	adds	r7, #24
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40020000 	.word	0x40020000
 800246c:	40020400 	.word	0x40020400
 8002470:	40020800 	.word	0x40020800
 8002474:	40020c00 	.word	0x40020c00
 8002478:	40021000 	.word	0x40021000
 800247c:	40000400 	.word	0x40000400
 8002480:	40000800 	.word	0x40000800
 8002484:	40000c00 	.word	0x40000c00

08002488 <_ZN7Encoder8positionEv>:

uint32_t Encoder::position(){
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
	return TIM_GetCounter(TIM4);
 8002490:	4803      	ldr	r0, [pc, #12]	; (80024a0 <_ZN7Encoder8positionEv+0x18>)
 8002492:	f7fe fe85 	bl	80011a0 <TIM_GetCounter>
 8002496:	4603      	mov	r3, r0
};
 8002498:	4618      	mov	r0, r3
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	40000800 	.word	0x40000800

080024a4 <__libc_init_array>:
 80024a4:	b570      	push	{r4, r5, r6, lr}
 80024a6:	4b0e      	ldr	r3, [pc, #56]	; (80024e0 <__libc_init_array+0x3c>)
 80024a8:	4d0e      	ldr	r5, [pc, #56]	; (80024e4 <__libc_init_array+0x40>)
 80024aa:	1aed      	subs	r5, r5, r3
 80024ac:	10ad      	asrs	r5, r5, #2
 80024ae:	2400      	movs	r4, #0
 80024b0:	461e      	mov	r6, r3
 80024b2:	42ac      	cmp	r4, r5
 80024b4:	d004      	beq.n	80024c0 <__libc_init_array+0x1c>
 80024b6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80024ba:	4790      	blx	r2
 80024bc:	3401      	adds	r4, #1
 80024be:	e7f8      	b.n	80024b2 <__libc_init_array+0xe>
 80024c0:	f000 f816 	bl	80024f0 <_init>
 80024c4:	4d08      	ldr	r5, [pc, #32]	; (80024e8 <__libc_init_array+0x44>)
 80024c6:	4b09      	ldr	r3, [pc, #36]	; (80024ec <__libc_init_array+0x48>)
 80024c8:	1aed      	subs	r5, r5, r3
 80024ca:	10ad      	asrs	r5, r5, #2
 80024cc:	2400      	movs	r4, #0
 80024ce:	461e      	mov	r6, r3
 80024d0:	42ac      	cmp	r4, r5
 80024d2:	d004      	beq.n	80024de <__libc_init_array+0x3a>
 80024d4:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80024d8:	4790      	blx	r2
 80024da:	3401      	adds	r4, #1
 80024dc:	e7f8      	b.n	80024d0 <__libc_init_array+0x2c>
 80024de:	bd70      	pop	{r4, r5, r6, pc}
 80024e0:	08002508 	.word	0x08002508
 80024e4:	08002508 	.word	0x08002508
 80024e8:	0800250c 	.word	0x0800250c
 80024ec:	08002508 	.word	0x08002508

080024f0 <_init>:
 80024f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024f2:	bf00      	nop
 80024f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024f6:	bc08      	pop	{r3}
 80024f8:	469e      	mov	lr, r3
 80024fa:	4770      	bx	lr

080024fc <_fini>:
 80024fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024fe:	bf00      	nop
 8002500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002502:	bc08      	pop	{r3}
 8002504:	469e      	mov	lr, r3
 8002506:	4770      	bx	lr
